/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package cn.cloudartisan.crius.message.parser;

import android.view.View;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import cn.cloudartisan.crius.R;
import cn.cloudartisan.crius.adapter.SystemMsgListViewAdapter;
import cn.cloudartisan.crius.app.CriusApplication;
import cn.cloudartisan.crius.bean.Message;
import cn.cloudartisan.crius.bean.SystemMsg;
import cn.cloudartisan.crius.bean.User;
import cn.cloudartisan.crius.ui.contact.ContactsVerifyActivity;
import cn.cloudartisan.crius.util.FileURLBuilder;

import java.util.HashMap;

public class Type100MessageParser extends MessageParser {
    
    public void encodeContent(HashMap data) {
        HashMap<String, String> contentData = new HashMap<String, String>();
        contentData.put("sourceAccount",( (User)data.get("user")).getAccount());
        contentData.put("sourceName", ((User)data.get("user")).getName());
        contentData.put("requestMsg", String.valueOf(data.get("requestMsg")));
        ((Message)data.get("message")).content = JSON.toJSONString(contentData);
    }
    
    public String getMessagePreview(Message msg) {
        StringBuffer sb = new StringBuffer();
        JSONObject json = JSON.parseObject(msg.content);
        sb.append(CriusApplication.getInstance().getString(R.string.tip_request_addfriend, new Object[] {json.getString("sourceName")}));
        return sb.toString();
    }
    
    public void displayInSysMsgListView(final SystemMsgListViewAdapter.MessageViewHolder holder,final Message message) {
        holder.content.setVisibility(View.VISIBLE);
        holder.content.setText(getMessagePreview(message));
        JSONObject json = JSON.parseObject(message.content);
        String handleResult = json.getString(SystemMsg.HANDLE_RESULT);
        holder.name.setVisibility(View.GONE);
        holder.result_show.setVisibility(View.VISIBLE);
        holder.name.setText(json.getString("sourceName"));
        holder.handleButton.setVisibility(View.GONE);

        if(handleResult == null) {
            holder.handleButton.setVisibility(View.VISIBLE);
            holder.handleButton.setOnClickListener(new View.OnClickListener() {
                

                public void onClick(View arg0) {
                    ((ContactsVerifyActivity)holder.content.getContext()).onHandleButtonClick(message);
                }
            });
            holder.result_show.setVisibility(View.GONE);
        } else if(handleResult.equals(SystemMsg.RESULT_AGREE)) {
            holder.result_show.setText(R.string.common_has_agree);
            holder.result_show.setTextColor(CriusApplication.getInstance().getResources().getColor(R.color.theme_green));
        } else if(handleResult.equals(SystemMsg.RESULT_IGNORE)) {
            holder.result_show.setText(R.string.common_has_ignore);
            holder.result_show.setTextColor(CriusApplication.getInstance().getResources().getColor(R.color.text_grey));
        } else if(handleResult.equals(SystemMsg.RESULT_REFUSE)) {
            holder.result_show.setTextColor(CriusApplication.getInstance().getResources().getColor(R.color.red));
            holder.result_show.setText(R.string.common_has_refuse);
        }
        holder.headImageView.load(FileURLBuilder.getUserIconUrl(json.getString("sourceAccount")), R.drawable.icon_head_default);
    }
    
    public HashMap<String, Object> decodeContent(Message message) {
        return null;
    }
}
