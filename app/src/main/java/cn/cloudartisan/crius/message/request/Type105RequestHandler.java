/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package cn.cloudartisan.crius.message.request;

import android.graphics.Color;
import android.text.SpannableString;
import android.text.style.ForegroundColorSpan;
import android.text.style.StyleSpan;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import cn.cloudartisan.crius.client.constant.CIMConstant;
import cn.cloudartisan.crius.R;
import cn.cloudartisan.crius.app.URLConstant;
import cn.cloudartisan.crius.bean.*;
import cn.cloudartisan.crius.db.GroupDBManager;
import cn.cloudartisan.crius.db.MessageDBManager;
import cn.cloudartisan.crius.message.parser.MessageParserFactory;
import cn.cloudartisan.crius.network.HttpAPIRequester;
import cn.cloudartisan.crius.network.HttpAPIResponser;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Type105RequestHandler extends RequestHandler implements HttpAPIResponser {
    
    public Type105RequestHandler() {
        requester = new HttpAPIRequester(this);
    }
    
    public CharSequence getMessage() {
        JSONObject json = JSON.parseObject(message.content);
        StringBuffer buffer = new StringBuffer();
        buffer.append(context.getString(R.string.tip_request_invitegroup, new Object[] {json.getString("sourceName"), json.getString("targetGroupName")}));
        SpannableString text = new SpannableString(buffer.toString());
        text.setSpan(new ForegroundColorSpan(Color.parseColor("#3C568B")), 0x0, json.getString("sourceName").length(), 0x21);
        text.setSpan(new StyleSpan(0x1), 0x0, json.getString("sourceName").length(), 0x21);
        return text;
    }
    
    public String getTitle() {
        return context.getString(R.string.tip_title_groupmessage);
    }
    
    public MessageItemSource decodeMessageSource() {
        JSONObject json = JSON.parseObject(message.content);
        Group group = new Group();
        group.name = json.getString("targetGroupName");
        return group;
    }
    
    public void handleRefuse() {
        JSONObject json = JSON.parseObject(message.content);
        apiParams.put("content", context.getString(R.string.tip_refuse_invitegroup, self.getName(), json.getString("targetGroupName")));
        apiParams.put("receiver", json.getString("sourceAccount"));
        apiParams.put("type", "2");
        HttpAPIRequester.execute(apiParams, URLConstant.MESSAGE_SEND_URL);
        json.put(SystemMsg.HANDLE_RESULT, SystemMsg.RESULT_REFUSE);
        message.content = json.toJSONString();
        MessageDBManager.getManager().modifyMsgContent(message);
        context.showToast(context.getString(R.string.tip_handle_succeed));
        context.finish();
    }
    
    public void handleAgree() {
        requester.execute(new TypeReference<Type105RequestHandler>() { }.getType(), null, URLConstant.GROUPMEMBER_ADD_URL);
    }
    
    public CharSequence getDescription() {
        return JSON.parseObject(message.content).getString("targetGroupSummary");
    }
    
    public void onSuccess(Object data, List list, Page page, String code, String url) {
        context.hideProgressDialog();
        if(CIMConstant.ReturnCode.CODE_200.equals(code)) {
            JSONObject json = JSON.parseObject(message.content);
            MessageDBManager.getManager().batchModifyAgree(json.getString("sourceAccount"), message.type);
            context.showToast(context.getString(R.string.tip_handle_succeed));
            saveGroup(json);
            Message newMsg = new Message();
            newMsg.receiver = json.getString("sourceAccount");
            HashMap<String, Object> inputData = new HashMap<String, Object>();
            inputData.put("user", self);
            inputData.put("message", newMsg);
            inputData.put("targetGroupId", json.getString("targetGroupId"));
            inputData.put("targetGroupName", json.getString("targetGroupName"));
            newMsg.type = "106";
            MessageParserFactory.getFactory().getMessageParser(newMsg.type).encodeContent(inputData);
            apiParams.clear();
            apiParams.put("content", newMsg.content);
            apiParams.put("sender", "system");
            apiParams.put("receiver", newMsg.receiver);
            apiParams.put("type", newMsg.type);
            HttpAPIRequester.execute(apiParams, URLConstant.MESSAGE_SEND_URL);
            context.finish();
        }
    }
    
    private void saveGroup(JSONObject json) {
        Group group = new Group();
        group.groupId = json.getString("targetGroupId");
        group.name = json.getString("targetGroupName");
        group.founder = json.getString("targetGroupFounder");
        group.summary = json.getString("targetGroupSummary");
        group.category = json.getString("targetGroupCategory");
        GroupDBManager.getManager().saveGroup(group);
    }
    
    public void onFailed(Exception e) {
        context.hideProgressDialog();
    }
    
    public Map getRequestParams(String code) {
        JSONObject json = JSON.parseObject(message.content);
        apiParams.put("groupId", json.getString("targetGroupId"));
        apiParams.put("account", self.getAccount());
        return apiParams;
    }
    
    public void onRequest() {
        context.showProgressDialog(context.getString(R.string.tip_loading, new Object[] {context.getString(R.string.common_handle)}));
    }
}
