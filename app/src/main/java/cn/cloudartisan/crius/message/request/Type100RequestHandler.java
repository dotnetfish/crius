/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package cn.cloudartisan.crius.message.request;

import android.graphics.Color;
import android.text.SpannableString;
import android.text.style.ForegroundColorSpan;
import android.text.style.StyleSpan;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import cn.cloudartisan.crius.client.constant.CIMConstant;
import cn.cloudartisan.crius.R;
import cn.cloudartisan.crius.app.Global;
import cn.cloudartisan.crius.app.URLConstant;
import cn.cloudartisan.crius.bean.*;
import cn.cloudartisan.crius.db.FriendDBManager;
import cn.cloudartisan.crius.db.MessageDBManager;
import cn.cloudartisan.crius.message.parser.MessageParserFactory;
import cn.cloudartisan.crius.network.HttpAPIRequester;
import cn.cloudartisan.crius.network.HttpAPIResponser;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Type100RequestHandler extends RequestHandler implements HttpAPIResponser {
    HttpAPIRequester detailedRequester;
    
    public Type100RequestHandler() {
        requester = new HttpAPIRequester(this);
        detailedRequester = new HttpAPIRequester(detailedResponser);
    }
    
    public CharSequence getMessage() {
        JSONObject json = JSON.parseObject(message.content);
        StringBuffer buffer = new StringBuffer();
        buffer.append(context.getString(R.string.tip_request_addfriend, new Object[] {json.getString("sourceName")}));
        SpannableString text = new SpannableString(buffer.toString());
        text.setSpan(new ForegroundColorSpan(Color.parseColor("#3C568B")), 0x0, json.getString("sourceName").length(), 0x21);
        text.setSpan(new StyleSpan(0x1), 0x0, json.getString("sourceName").length(), 0x21);
        return text;
    }
    
    public String getTitle() {
        return "\u597d\u53cb\u7533\u8bf7";
    }
    
    public MessageItemSource decodeMessageSource() {
        JSONObject json = JSON.parseObject(message.content);
        Friend friend = new Friend();
        friend.account = json.getString("sourceAccount");
        friend.name = json.getString("sourceName");
        return friend;
    }
    
    public void handleRefuse() {
        JSONObject json = JSON.parseObject(message.content);
        apiParams.put("content", context.getString(R.string.tip_refuse_addfriend, new Object[] {self.getName()}));
        apiParams.put("receiver", json.getString("sourceAccount"));
        apiParams.put("type", "2");
        HttpAPIRequester.execute(apiParams, URLConstant.MESSAGE_SEND_URL);
        json.put(SystemMsg.HANDLE_RESULT, SystemMsg.RESULT_REFUSE);
        message.content = json.toJSONString();
        MessageDBManager.getManager().modifyMsgContent(message);
        context.showToast(context.getString(R.string.tip_handle_succeed));
        context.finish();
    }
    
    public void handleAgree() {
        requester.execute(new TypeReference<Type100RequestHandler> (){}.getType(), null, URLConstant.FRIEND_ADD_URL);
    }
    
    public CharSequence getDescription() {
        JSONObject json = JSON.parseObject(message.content);
        return context.getString(R.string.tip_request_verify, new Object[] {json.getString("requestMsg")});
    }
    HttpAPIResponser   detailedResponser = new HttpAPIResponser()
    {
        public Map<String, Object> getRequestParams(String code)
        {
            HashMap localHashMap = new HashMap();
            localHashMap.put("account", Type100RequestHandler.this.decodeMessageSource().getId());
            return localHashMap;
        }

    public void onFailed(Exception paramAnonymousException)
    {
        Type100RequestHandler.this.context.hideProgressDialog();
    }

    public void onRequest() {}

        @Override
       public void onSuccess(Object paramAnonymousObject, List paramAnonymousList, Page paramAnonymousPage, String paramAnonymousString1, String paramAnonymousString2)
    {
        if ((CIMConstant.ReturnCode.CODE_200.equals(paramAnonymousString1)) && ((paramAnonymousObject instanceof Friend)))
        {
            Type100RequestHandler.this.context.hideProgressDialog();
            Type100RequestHandler.this.context.finish();
            FriendDBManager.getManager().saveFriend((Friend)paramAnonymousObject);
        }
    }
};
    
    public void onSuccess(Object data, List list, Page page, String code, String url) {
        if((CIMConstant.ReturnCode.CODE_200.equals(code)) && (url.equals(URLConstant.FRIEND_ADD_URL))) {
            TypeReference<Type100RequestHandler> typeReference=new TypeReference<Type100RequestHandler>(){};
            detailedRequester.execute(typeReference.getType(), null, URLConstant.USER_DETAILED_URL);
            JSONObject json = JSON.parseObject(message.content);
            MessageDBManager.getManager().batchModifyAgree(json.getString("sourceAccount"), message.type);
            context.showToast(context.getString(R.string.tip_handle_succeed));
            Message newMsg = new Message();
            newMsg.receiver = json.getString("sourceAccount");
            HashMap<String, Object> inputData = new HashMap<String, Object>();
            inputData.put("user", self);
            inputData.put("message", newMsg);
            newMsg.type = "101";
            MessageParserFactory.getFactory().getMessageParser(newMsg.type).encodeContent(inputData);
            apiParams.clear();
            HashMap<String, Object> type101Params = new HashMap<String, Object>();
            type101Params.put("content", newMsg.content);
            type101Params.put("sender", "system");
            type101Params.put("receiver", newMsg.receiver);
            type101Params.put("type", newMsg.type);
            HttpAPIRequester.execute(type101Params, URLConstant.MESSAGE_SEND_URL);
            HashMap<String, Object> type901Params = new HashMap<String, Object>();
            type901Params.put("sender", "system");
            type901Params.put("receiver", newMsg.receiver);
            type901Params.put("content", self.getAccount() + "\"}");
            type901Params.put("type", "901");
            HttpAPIRequester.execute(type901Params, URLConstant.MESSAGE_SEND_URL);
            apiParams.put("targetAccount", newMsg.receiver);
            apiParams.put("account", self.getAccount());
            HttpAPIRequester.execute(apiParams, URLConstant.USER_DETECTONLINE_URL);
        }
    }
    
    public void onFailed(Exception e) {
        context.hideProgressDialog();
    }
    
    public Map getRequestParams(String code) {
        JSONObject json = JSON.parseObject(message.content);
        apiParams.put("account", Global.getCurrentUser().getAccount());
        apiParams.put("friend", json.getString("sourceAccount"));
        return apiParams;
    }
    
    public void onRequest() {
        context.showProgressDialog(context.getString(R.string.tip_loading, new Object[] {context.getString(R.string.common_handle)}));
    }
}
