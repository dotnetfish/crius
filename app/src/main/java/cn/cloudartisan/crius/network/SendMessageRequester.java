/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package cn.cloudartisan.crius.network;

import android.content.Intent;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import cn.cloudartisan.crius.client.constant.CIMConstant;
import cn.cloudartisan.crius.app.CriusApplication;
import cn.cloudartisan.crius.app.URLConstant;
import cn.cloudartisan.crius.bean.Message;
import cn.cloudartisan.crius.bean.Page;
import cn.cloudartisan.crius.db.MessageDBManager;
import cn.cloudartisan.crius.util.MD5;

import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SendMessageRequester extends HttpAPIRequester implements HttpAPIResponser, FileUploader.OnUploadCallBack {
    int fileCount;
    Message message;
    public HashMap<String, Object> apiParams = new HashMap();
    int count = 0x0;
    
    public SendMessageRequester(Message message) {
        this.message = message;
        responser = this;
    }
    
    public void execute() {
        if(message.file == null) {
            execute(new TypeReference<SendMessageRequester>() {
            }.getType(), null, URLConstant.MESSAGE_SEND_URL);
            return;
        }
        fileCount = message.file.split(",").length;
        String[] files = message.file.split(",");
        StringBuffer buffer = new StringBuffer();
        for(String fileName:files) {

            File file = new File(fileName);
            if (file.exists()) {
                FileUploader.asyncUpload(MD5.getMD5(file.getAbsolutePath()), file, this);
                buffer.append(MD5.getMD5(file.getAbsolutePath())).append(",");
            }
            if ("2".equals(message.fileType)) {
                FileUploader.asyncUpload(fileName, new File("/" + fileName), this);
            } else {
                FileUploader.asyncUpload(fileName, new File("/" + fileName), this);
            }
            buffer.append(fileName).append(",");
            message.file = buffer.deleteCharAt((buffer.length() - 0x1)).toString();
        }
    }
    
    public void onSuccess(Object data, List list, Page page, String code, String url) {
        Intent intent = new Intent("com.farsunset.cim.SEND_STATUS_CHANGED");
        if(CIMConstant.ReturnCode.CODE_200.equals(code)) {
            MessageDBManager.getManager().deleteById(message.gid);
            //Object json = JSON.parseObject(data);
            JSONObject json=(JSONObject)data;
            message.gid = json.getString("id");
            message.createTime = json.getString("createTime");
            message.status = "1";
            MessageDBManager.getManager().saveMessage(message);
        } else {
            message.status = "-3";
        }
        intent.putExtra(Message.NAME, message);
        CriusApplication.getInstance().sendBroadcast(intent);
    }
    
    public void onFailed(Exception e) {
        message.status = "-3";
        Intent intent = new Intent("com.farsunset.cim.SEND_STATUS_CHANGED");
        intent.putExtra(Message.NAME, message);
        CriusApplication.getInstance().sendBroadcast(intent);
    }
    
    public Map getRequestParams(String code) {
        apiParams.put("content", message.content);
        apiParams.put("title", message.title);
        apiParams.put("sender", message.sender);
        apiParams.put("receiver", message.receiver);
        apiParams.put("type", message.type);
        apiParams.put("fileType", message.fileType);
        apiParams.put("file", message.file);
        return apiParams;
    }
    
    public void onRequest() {
    }
    
    public void complete(String key, File file) {
        count = (count + 0x1);
        if(fileCount == count) {
            super.execute(new TypeReference<SendMessageRequester>() {
                }.getType(), null,  URLConstant.MESSAGE_SEND_URL);
        }
    }
    
    public void failed(Exception e, String key) {
        handler.sendEmptyMessage(0x1);
    }
    
    public void onProgress(String key, float progress) {
    }
}
