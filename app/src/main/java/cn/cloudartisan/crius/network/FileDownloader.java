/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package cn.cloudartisan.crius.network;

import android.os.Handler;
import android.os.Looper;
import android.os.Message;

import java.util.HashMap;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.Executors;
import java.io.File;

public class FileDownloader {
    public static final int STATUS_AWAIT = 0x3;
    public static final int STATUS_DONE = 0xc8;
    public static final int STATUS_FAILED = 0x4;
    public static final int STATUS_RUNING = 0x0;
    public static final int STATUS_STOP = 0x1;
    private static FileDownloader.FileDownloadCallBack downloadCallBack;
    private ThreadPoolExecutor downloadExecutor;
    private static FileDownloader fileDownloader;
    private FileDownloader.DownloadHandler handler;
    private static HashMap<String, Integer> STATUS_MAP = new HashMap();
    private static HashMap<String, Long> FILE_SIZE_MAP = new HashMap();
    private static HashMap<String, Long> PROGRESS_MAP = new HashMap();
    
    private FileDownloader() {
        handler = new FileDownloader.DownloadHandler();
        downloadExecutor = (ThreadPoolExecutor)Executors.newFixedThreadPool(3);
    }
    
    public static synchronized FileDownloader getInstance() {
        if(fileDownloader == null) {
            fileDownloader = new FileDownloader();
        }

    return fileDownloader;
}

public String download(String fileUrl, File file) {
    String threadKey = fileUrl;
    downloadExecutor.execute(new Runnable() {

        public void run() {
            // :( Parsing error. Please contact me.
        }
    });
    return threadKey;
}

public void setOnDownloadCallBack(FileDownloader.FileDownloadCallBack callBack) {
    downloadCallBack = callBack;
}

public void stop(String threadKey) {
    STATUS_MAP.put(threadKey, Integer.valueOf(0x1));
}

public void stopAll() {

    for(String threadKey:STATUS_MAP.keySet()){
        stop(threadKey);
    }
}

public void shutdown() {
    downloadExecutor.shutdown();
}

public void destroy() {
    stopAll();
    if(downloadExecutor != null) {
        downloadExecutor.shutdown();
        downloadExecutor = null;
    }
    fileDownloader = null;
}

class DownloadHandler extends Handler {
    
    private DownloadHandler() {
        super(Looper.getMainLooper());
    }

    public void dispatchMessage(Message paramMessage)
    {
        String str = paramMessage.getData().getString("threadKey");
        switch (paramMessage.what)
        {
            default:
            case 0:

              if(!((((Integer)FileDownloader.STATUS_MAP.get(str)).intValue() != 0) && (((Integer)FileDownloader.STATUS_MAP.get(str)).intValue() != 200)) || (((Integer)FileDownloader.STATUS_MAP.get(str)).intValue() == 4)){
                  paramMessage = obtainMessage();
                  paramMessage.getData().putString("threadKey", str);
                  if ((((Long)FileDownloader.FILE_SIZE_MAP.get(str)).equals(FileDownloader.PROGRESS_MAP.get(str))) || (((Integer)FileDownloader.STATUS_MAP.get(str)).equals(Integer.valueOf(200)))) {
                      paramMessage.what = 200;
                      FileDownloader.downloadCallBack.progress(str, ((Long)FileDownloader.FILE_SIZE_MAP.get(str)).longValue(), ((Long)FileDownloader.PROGRESS_MAP.get(str)).longValue());
                     // FileDownloader.downloadCallBack.progress(str, ((Long)FileDownloader.FILE_SIZE_MAP.get(str)).longValue(), ((Long)FileDownloader.PROGRESS_MAP.get(str)).longValue());
                      FileDownloader.PROGRESS_MAP.remove(str);
                      FileDownloader.STATUS_MAP.remove(str);
                      FileDownloader.FILE_SIZE_MAP.remove(str);
                  }else{
                      sendMessageDelayed(paramMessage, 100L);
                  }
              }

            case 1:
                FileDownloader.downloadCallBack.statusChange(str, 1);
                return;
            case 4:
                FileDownloader.downloadCallBack.statusChange(str, 4);
                return;
        }

    }
}
    public  interface FileDownloadCallBack
    {
         void progress(String paramString, long paramLong1, long paramLong2);

        void statusChange(String paramString, int paramInt);
    }
}
