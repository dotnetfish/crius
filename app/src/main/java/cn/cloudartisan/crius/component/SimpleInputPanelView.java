/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package cn.cloudartisan.crius.component;

import android.content.Context;
import android.graphics.drawable.Drawable;
import android.text.Editable;
import android.text.SpannableString;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.text.style.ImageSpan;
import android.util.AttributeSet;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.LinearLayout;
import cn.cloudartisan.crius.R;
import cn.cloudartisan.crius.app.LvxinApplication;

public class SimpleInputPanelView extends LinearLayout implements View.OnClickListener, EmoticoPanelView.OnEmoticoSelectedListener, TextWatcher, View.OnTouchListener {
    Context _context;
    View chatEmotionButton;
    EmoticoPanelView emoticoPanelView;
    InputMethodManager inputMethodManager;
    EditText messageEditText;
    SimpleInputPanelView.OnOperationListener onOperationListener;
    View sendButton;
    boolean isChangeSelf = false;
    
    public SimpleInputPanelView(Context context, AttributeSet attrs) {
        super(context, attrs);
        _context = context;
    }
    
    public void toggleVisible() {
        if(getVisibility() == View.VISIBLE) {
            setVisibility(View.GONE);
            return;
        }
        setVisibility(View.VISIBLE);
    }
    
    public void show() {
        messageEditText.requestFocus();
        setVisibility(View.VISIBLE);
        inputMethodManager.toggleSoftInput(0x0, 0x2);
    }
    
    public void hide() {
        messageEditText.setHint(0x0);
        messageEditText.setText("");
        emoticoPanelView.setVisibility(View.GONE);
        chatEmotionButton.setSelected(false);
        inputMethodManager.hideSoftInputFromWindow(messageEditText.getWindowToken(), 0x0);
        setVisibility(View.GONE);
    }
    
    public boolean isShowing() {
        return (getVisibility() == View.VISIBLE);
    }

    public void onFinishInflate() {
        super.onFinishInflate();
        sendButton = findViewById(R.id.sendMessageButton);
        sendButton.setOnClickListener(this);
        messageEditText = (EditText)findViewById(R.id.messageEditText);
        emoticoPanelView = (EmoticoPanelView)findViewById(R.id.emoticoPanelView);
        emoticoPanelView.setOnEmoticoSelectedListener(this);
        messageEditText.addTextChangedListener(this);
        inputMethodManager = (InputMethodManager)_context.getSystemService(Context.INPUT_METHOD_SERVICE);
        chatEmotionButton = findViewById(R.id.chat_emotion);
        chatEmotionButton.setOnClickListener(this);
        messageEditText.setOnTouchListener(this);

    }
    
    public void setOnOperationListener(SimpleInputPanelView.OnOperationListener onSendContentListener) {
        onOperationListener = onSendContentListener;
    }
    
    public void onClick(View view) {
        switch(view.getId()) {
            case R.id.chat_emotion:
            {
                if(emoticoPanelView.getVisibility() == View.VISIBLE) {
                    emoticoPanelView.setVisibility(View.GONE);
                    chatEmotionButton.setSelected(false);
                    return;
                }
                chatEmotionButton.setSelected(true);
                emoticoPanelView.setVisibility(View.VISIBLE);
                inputMethodManager.hideSoftInputFromWindow(messageEditText.getWindowToken(), 0x0);
                return;
            }
            case R.id.sendMessageButton:
            {
                if(!TextUtils.isEmpty(messageEditText.getText())) {
                    onOperationListener.onSendContent(messageEditText.getText().toString());
                    break;
                }
            }
        }
    }
    
    public void onEmoticoSelected(String key) {
        messageEditText.setCursorVisible(true);
        if("DELETE".equals(key)) {
            KeyEvent keyEventDown = new KeyEvent(0x0, 0x43);
            messageEditText.onKeyDown(0x43, keyEventDown);
            return;
        }
        SpannableString ss = new SpannableString(key);
        int id =LvxinApplication.emoticonsIdMap.get(key);
        Drawable drawable = getResources().getDrawable(id);
        if(drawable != null) {
            int size = (int)(0.5f + (getResources().getDisplayMetrics().density * 20.0f));
            drawable.setBounds(0x0, 0x0, size, size);
            ImageSpan span = new ImageSpan(drawable, 0x0);
            ss.setSpan(span, 0x0, 0x5, 0x21);
            messageEditText.getEditableText().insert(messageEditText.getSelectionStart(), ss);
        }
    }
    
    public void setHint(String hint) {
        messageEditText.setHint(hint);
    }
    
    public void setContent(String text) {
        messageEditText.setText(text);
    }
    
    public void afterTextChanged(Editable editable) {
    }
    
    public void beforeTextChanged(CharSequence charsequence, int i, int j, int k) {
    }
    
    public void onTextChanged(CharSequence charsequence, int i, int j, int k) {
    }
    
    public boolean onTouch(View v, MotionEvent event) {
        emoticoPanelView.setVisibility(View.GONE);
        chatEmotionButton.setSelected(false);
        return false;
    }
    
    public void reset() {
        emoticoPanelView.setVisibility(View.GONE);
        chatEmotionButton.setSelected(false);
        inputMethodManager.hideSoftInputFromWindow(messageEditText.getWindowToken(), 0x0);
        messageEditText.setText(null);
    }
    public   interface OnOperationListener
    {
         void onKeyboardShow();

        void onSendContent(String paramString);
    }
}
