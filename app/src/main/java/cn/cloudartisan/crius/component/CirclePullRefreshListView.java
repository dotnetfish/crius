/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package cn.cloudartisan.crius.component;

import android.content.Context;
import android.content.Intent;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.widget.AbsListView;
import android.widget.ListView;
import com.alibaba.fastjson.JSON;
import cn.cloudartisan.crius.R;
import cn.cloudartisan.crius.bean.Comment;
import cn.cloudartisan.crius.bean.Message;
import cn.cloudartisan.crius.ui.trend.CircleMessageListActivity;
import cn.cloudartisan.crius.ui.trend.MyCircleHomeActivity;
import cn.cloudartisan.crius.util.AppTools;
import cn.cloudartisan.crius.util.FileURLBuilder;

import java.util.List;

public class CirclePullRefreshListView extends ListView implements AbsListView.OnScrollListener, View.OnClickListener {
    private static final int DONE = 0x3;
    private static final int LOADING = 0x4;
    private static final int LOADING_MORE = 0x5;
    private static final int LOADING_MORE_DONE = 0x6;
    private static final int PULL_To_REFRESH = 0x1;
    private static final int RATIO = 0x3;
    private static final int REFRESHING = 0x2;
    private static final int RELEASE_To_REFRESH=0;
    private Context context;
    private int firstItemIndex;
    private View footer;
    private int footerHeight;
    private int footerState;
    private View header;
    private int headerHeight;
    private boolean isRecored;
    private CirclePullRefreshListView.OnRefreshListener refreshListener;
    private CirclePullRefreshListView.OnScrollingListener scrollingListener;
    private int startY;
    private int state;
    
    public CirclePullRefreshListView(Context paramContext, AttributeSet paramAttributeSet) {
        super(paramContext, paramAttributeSet);
        setOnScrollListener(this);
        context = paramContext;
        init(paramContext);
    }
    
    public void init(Context context) {
        header = LayoutInflater.from(context).inflate(R.layout.layout_circle_listheader, null);
        footer = LayoutInflater.from(context).inflate(R.layout.list_footer, null);
        AppTools.measureView(header);
        headerHeight = context.getResources().getDimensionPixelOffset(R.dimen.circle_home_header_heigh);
        footerHeight = footer.getMeasuredHeight();
        addHeaderView(header, null, false);
        addFooterView(footer, null, false);
        footer.setVisibility(View.GONE);
        header.setPadding(0, -headerHeight,0, 0);
        footer.setPadding(0, 0, 0, (footerHeight * -1));
        header.findViewById(R.id.sns_message_remind).setOnClickListener(this);
        header.findViewById(R.id.icon).setOnClickListener(this);
    }
    
    public void onScroll(AbsListView arg0, int firstVisiableItem, int visibleItemCount, int count) {
    }
    
    public void doRefresh() {
        state = 0x2;
        changeHeaderViewByState();
        onRefresh();
    }
    
    public boolean onTouchEvent(MotionEvent event) {

        switch(event.getAction()) {
            case 0:
                if ((firstItemIndex == 0) && (!isRecored)) {
                    isRecored = true;
                    startY = (int) event.getY();
                }
                break;

            case 1:
                if ((state != 2) && (state != 4)) {
                    if (state == 1) {
                        state = 3;
                        changeHeaderViewByState();
                    } else if (state == 0) {
                        state = 2;
                        changeHeaderViewByState();
                        onRefresh();
                    }
                } else {
                    isRecored = false;
                }
           break;
            case 2:
                int tempY = (int) event.getY();
                if ((firstItemIndex == 0) && (!isRecored)) {
                    isRecored = true;
                    startY = tempY;
                } else if ((state != 2) && (isRecored) && (state != 4)) {
                    if (state == 0) {
                        if (((tempY - startY) / 0x3) < headerHeight) {
                            if ((tempY - startY) > 0) {
                                state = 0x1;
                                changeHeaderViewByState();
                            }
                        } else if ((tempY - startY) <= 0) {
                            state = 0x3;
                            changeHeaderViewByState();
                        }
                    } else if ((state == 0x1) && (getFirstVisiblePosition() == 0)) {
                        if (((tempY - startY) / 0x3) >= headerHeight) {
                            state = 0x0;
                            changeHeaderViewByState();
                        } else if ((tempY - startY) <= 0) {
                            state = 0x3;
                            changeHeaderViewByState();
                        }
                    } else if (state == 0x3) {
                        if ((tempY - startY) > 0) {
                            state = 0x1;
                            changeHeaderViewByState();
                        }
                    } else if (state == 0x1) {
                        header.setPadding(0x0, ((headerHeight * -0x1) + ((tempY - startY) / 0x3)), 0x0, 0x0);
                    } else if ((state == 0) && ((((tempY - startY) / 0x3) - headerHeight) <= 0)) {
                        header.setPadding(0x0, (((tempY - startY) / 0x3) - headerHeight), 0x0, 0x0);
                       // break;
                    }
                }
                break;
            }


        return super.onTouchEvent(event);
    }
    
    public void onScrollStateChanged(AbsListView view, int scrollState) {
        if(scrollState == 0) {
            int lastIndex = view.getLastVisiblePosition();
            int count = view.getCount();
            if((lastIndex == (count - 0x1)) || (lastIndex == (count - 0x2))) {
                footer.setVisibility(View.VISIBLE);
                if((((lastIndex - 0x1) % 0xa) != 0) && ((lastIndex % 0xa) == 0)
                 || count > 0x2) {
                    footer.findViewById(R.id.footer_progressBar).setVisibility(View.VISIBLE);
                    footer.findViewById(R.id.footer_hint).setVisibility(View.GONE);
                    if(footerState != 0x5) {
                        refreshListener.onShowNextPage();
                        footerState = 0x5;
                    }
                } else {
                    footer.findViewById(R.id.footer_progressBar).setVisibility(View.GONE);
                    footer.findViewById(R.id.footer_hint).setVisibility(View.VISIBLE);
                }
            }
        }
        if(scrollState == 1) {
            scrollingListener.onScrolling();
        }
    }
    
    private void changeHeaderViewByState() {
        switch(state) {
            case 2:
            {
                header.setPadding(0x0, 0x0, 0x0, 0x0);
                return;
            }
            case 3:
            {
                header.setPadding(0x0, (headerHeight * -0x1), 0x0, 0x0);
                break;
            }
        }
    }
    
    public void setOnRefreshListener(CirclePullRefreshListView.OnRefreshListener refreshListener) {
       this. refreshListener = refreshListener;
    }
    
    public void setOnScrollingListener(CirclePullRefreshListView.OnScrollingListener scrollingListener) {
        this.scrollingListener = scrollingListener;
    }
    
    public void refreshComplete() {
        state = 0x3;
        changeHeaderViewByState();
    }
    
    private void onRefresh() {
        if(refreshListener != null) {
            refreshListener.onRefresh();
        }
    }
    
    public void showMoreComplete() {
        footerState = 6;
        footer.findViewById(R.id.footer_progressBar).setVisibility(View.GONE);
    }
    
    public void showMessageRemind(List<Message> msgList) {
        if(!msgList.isEmpty()) {
            this.header.findViewById(R.id.sns_message_remind).setVisibility(VISIBLE);

            for(int var2 = 0; var2 < msgList.size(); ++var2) {
                Comment var3 = JSON.parseObject((msgList.get(var2)).content, Comment.class);
                if(var2 == 0) {
                    ((WebImageView)this.header.findViewById(R.id.sns_notify_firstimg)).load(FileURLBuilder.getUserIconUrl(var3.account), 2130837860);
                }

                if(var2 == 1) {
                    ((WebImageView)this.header.findViewById(R.id.sns_notify_secondimg)).load(FileURLBuilder.getUserIconUrl(var3.account), 2130837860);
                }

                if(var2 == 2) {
                    ((WebImageView)this.header.findViewById(R.id.sns_notify_lastimg)).load(FileURLBuilder.getUserIconUrl(var3.account), 2130837860);
                }
            }

        } else {
            this.header.findViewById(R.id.sns_message_remind).setVisibility(GONE);
        }

    }
    
    public void onClick(View view) {
        switch(view.getId()) {
            case R.id.sns_message_remind:
            {
                Intent intent = new Intent(context, CircleMessageListActivity.class);
                context.startActivity(intent);
                return;
            }
            case R.id.icon:
            {
                Intent mintent = new Intent(context, MyCircleHomeActivity.class);
                context.startActivity(mintent);
                break;
            }
        }
    }

    public  interface OnRefreshListener
    {
         void onRefresh();

        void onShowNextPage();
    }

    public interface OnScrollingListener
    {
        void onScrolling();
    }
}
