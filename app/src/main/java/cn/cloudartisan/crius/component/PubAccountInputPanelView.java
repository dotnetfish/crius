/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package cn.cloudartisan.crius.component;

import android.content.Context;
import android.graphics.drawable.Drawable;
import android.text.Editable;
import android.text.SpannableString;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.text.style.ImageSpan;
import android.util.AttributeSet;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.TextView;
import cn.cloudartisan.crius.R;
import cn.cloudartisan.crius.app.LvxinApplication;
import cn.cloudartisan.crius.bean.PublicMenu;
import cn.cloudartisan.crius.util.PubMenuAscComparator;
import cn.cloudartisan.crius.widget.PubAccountMenuWindow;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class PubAccountInputPanelView extends FrameLayout implements View.OnClickListener, EmoticoPanelView.OnEmoticoSelectedListener, TextWatcher, View.OnTouchListener, PubAccountMenuWindow.OnMenuClickListener {
    PubAccountMenuWindow.OnMenuClickListener OnMenuClickListener;
    Context _context;
    Animation apperAnimation;
    View chatEmotionButton;
    EmoticoPanelView emoticoPanelView;
    InputMethodManager inputMethodManager;
    View inputView;
    View keyboardSwitchButton;
    LinearLayout menuBarView;
    List<PublicMenu> menuList;
    View menuSwitchButton;
    View menuView;
    PubAccountMenuWindow menuWindow;
    EditText messageEditText;
    PubAccountInputPanelView.OnOperationListener onOperationListener;
    View sendButton;
    boolean isChangeSelf = false;
    
    public PubAccountInputPanelView(Context context, AttributeSet attrs) {
        super(context, attrs);
        _context = context;
        menuWindow = new PubAccountMenuWindow(context,OnMenuClickListener);
    }
    
    public void setOnMenuClickListener(PubAccountMenuWindow.OnMenuClickListener onMenuClickListener) {
        OnMenuClickListener = onMenuClickListener;
    }
    
    public void buildMenus(List<PublicMenu> list) {
        menuList = list;
        int i = 0x0;
        List<PublicMenu> rootList = getRootMenuList();
        for(PublicMenu menu :rootList){
            if(!rootList.iterator().hasNext()) {
                View itemView =(View) LayoutInflater.from(_context).inflate(R.layout.layout_pub_root_menu, null);
                ((TextView)itemView.findViewById(R.id.menu_name)).setText(menu.name);
                itemView.setLayoutParams(new LinearLayout.LayoutParams(-0x2, -0x2, 1.0f));
                if(!menu.hasSubMenu()) {
                    itemView.findViewById(R.id.root_menu_mark).setVisibility(View.INVISIBLE);
                }
                itemView.setTag(menu);
                itemView.setTag(R.drawable.icon, Integer.valueOf(i));
                itemView.setOnClickListener(this);
                menuBarView.addView(itemView);

            }
        }



    }
    
    public List<PublicMenu> getSubMenuList(String pid) {
        ArrayList<PublicMenu> list = new ArrayList<PublicMenu>();

        for(PublicMenu menu:menuList){
            if(pid.equals(menu.fid)) {
                list.add(menu);
            }
        }
        Collections.sort(list, new PubMenuAscComparator());
        return list;


    }
    
    public List getRootMenuList() {
        ArrayList<PublicMenu> list = new ArrayList<PublicMenu>();

         for(PublicMenu menu:menuList){
             if(menu.isRootMenu()) {
                 list.add(menu);
             }
         }
        Collections.sort(list, new PubMenuAscComparator());
        return list;
    }
    
    public void toggleVisible() {
        if(getVisibility() == View.VISIBLE) {
            setVisibility(View.GONE);
            return;
        }
        setVisibility(View.VISIBLE);
    }
    
    public void show() {
        messageEditText.requestFocus();
        setVisibility(View.VISIBLE);
        inputMethodManager.toggleSoftInput(InputMethodManager.RESULT_UNCHANGED_SHOWN,InputMethodManager.SHOW_FORCED);
    }
    
    public void hide() {
        messageEditText.setHint(0x0);
        messageEditText.setText("");
        emoticoPanelView.setVisibility(View.GONE);
        chatEmotionButton.setSelected(false);
        inputMethodManager.hideSoftInputFromWindow(messageEditText.getWindowToken(), 0x0);
        setVisibility(View.GONE);
    }
    
    public boolean isShowing() {
        return (getVisibility() == View.VISIBLE);
    }
    
    public void onFinishInflate() {
        menuBarView = (LinearLayout)findViewById(R.id.menuBarView);
        sendButton = findViewById(R.id.sendMessageButton);
        sendButton.setOnClickListener(this);
        messageEditText = (EditText)findViewById(R.id.messageEditText);
        emoticoPanelView = (EmoticoPanelView)findViewById(R.id.emoticoPanelView);
        emoticoPanelView.setOnEmoticoSelectedListener(this);
        messageEditText.addTextChangedListener(this);
        inputMethodManager = (InputMethodManager)_context.getSystemService(Context.INPUT_METHOD_SERVICE);
        chatEmotionButton = findViewById(R.id.chat_emotion);
        chatEmotionButton.setOnClickListener(this);
        messageEditText.setOnTouchListener(this);
        keyboardSwitchButton = findViewById(R.id.keyboardSwitchButton);
        keyboardSwitchButton.setOnClickListener(this);
        menuSwitchButton = findViewById(R.id.menuSwitchButton);
        menuSwitchButton.setOnClickListener(this);
        menuView = findViewById(R.id.menuView);
        inputView = findViewById(R.id.keyboardView);
    }
    
    public void setOnOperationListener(PubAccountInputPanelView.OnOperationListener onSendContentListener) {
        onOperationListener = onSendContentListener;
    }
    
    public void onClick(View view) {
        switch(view.getId()) {
            case R.id.chat_emotion:
            {
                if(emoticoPanelView.getVisibility() == View.VISIBLE) {
                    emoticoPanelView.setVisibility(View.GONE);
                    chatEmotionButton.setSelected(false);
                    return;
                }
                chatEmotionButton.setSelected(true);
                emoticoPanelView.setVisibility(View.VISIBLE);
                inputMethodManager.hideSoftInputFromWindow(messageEditText.getWindowToken(), 0x0);
                return;
            }
            case R.id.sendMessageButton:
            {
                if(!TextUtils.isEmpty(messageEditText.getText())) {
                    onOperationListener.onSendContent(messageEditText.getText().toString());
                    ((EditText)findViewById(R.id.messageEditText)).getText().clear();
                }
                return;
            }
            case R.id.root_menu:
            {
                if(((PublicMenu)view.getTag()).hasSubMenu()) {
                    menuWindow.showAtLocation(view, getSubMenuList(((PublicMenu)view.getTag()).gid));
                    return;
                }
                OnMenuClickListener.onMenuClicked((PublicMenu)view.getTag());
                return;
            }
            case R.id.keyboardSwitchButton:
            {
                apperAnimation = AnimationUtils.loadAnimation(_context, R.anim.slide_in_from_bottom);
                apperAnimation.setAnimationListener(new Animation.AnimationListener() {
                    

                    
                    public void onAnimationStart(Animation animation) {
                    }
                    
                    public void onAnimationRepeat(Animation animation) {
                    }
                    
                    public void onAnimationEnd(Animation animation) {
                        inputView.clearAnimation();
                    }
                });
                inputView.setVisibility(View.VISIBLE);
                inputView.startAnimation(apperAnimation);
                menuView.setVisibility(View.GONE);
                return;
            }
            case R.id.menuSwitchButton:
            {
                apperAnimation = AnimationUtils.loadAnimation(_context, R.anim.slide_in_from_bottom);
                apperAnimation.setAnimationListener(new Animation.AnimationListener() {
                    

                    public void onAnimationStart(Animation animation) {
                    }
                    
                    public void onAnimationRepeat(Animation animation) {
                    }
                    
                    public void onAnimationEnd(Animation animation) {
                        menuView.clearAnimation();
                    }
                });
                menuView.setVisibility(View.VISIBLE);
                menuView.startAnimation(apperAnimation);
                inputView.setVisibility(View.GONE);
                break;
            }
        }
    }
    
    public void onEmoticoSelected(String key) {
        messageEditText.setCursorVisible(true);
        if("DELETE".equals(key)) {
            KeyEvent keyEventDown = new KeyEvent(0x0, 0x43);
            messageEditText.onKeyDown(0x43, keyEventDown);
            return;
        }
        SpannableString ss = new SpannableString(key);
        int id = LvxinApplication.emoticonsIdMap.get(key).intValue();
        Drawable drawable = getResources().getDrawable(id);
        if(drawable != null) {
            int size = (int)(0.5f + (getResources().getDisplayMetrics().density * 20.0f));
            drawable.setBounds(0x0, 0x0, size, size);
            ImageSpan span = new ImageSpan(drawable, 0x0);
            ss.setSpan(span, 0x0, 0x5, 0x21);
            messageEditText.getEditableText().insert(messageEditText.getSelectionStart(), ss);
        }
    }
    
    public void setHint(String hint) {
        messageEditText.setHint(hint);
    }
    
    public void setContent(String text) {
        messageEditText.setText(text);
    }
    
    public void afterTextChanged(Editable editable) {
    }
    
    public void beforeTextChanged(CharSequence charsequence, int i, int j, int k) {
    }
    
    public void onTextChanged(CharSequence charsequence, int i, int j, int k) {
    }
    
    public boolean onTouch(View v, MotionEvent event) {
        emoticoPanelView.setVisibility(View.GONE);
        chatEmotionButton.setSelected(false);
        return false;
    }
    
    public void reset() {
        emoticoPanelView.setVisibility(View.GONE);
        chatEmotionButton.setSelected(false);
        inputMethodManager.hideSoftInputFromWindow(messageEditText.getWindowToken(), 0x0);
        messageEditText.setText("");
    }
    
    public void onMenuClicked(PublicMenu menu) {
        OnMenuClickListener.onMenuClicked(menu);
    }
    public  interface OnOperationListener
    {
         void onKeyboardShow();

         void onSendContent(String paramString);
    }
}
