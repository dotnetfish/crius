/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package cn.cloudartisan.crius.ui;

import android.app.ActionBar;
import android.app.AlarmManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.os.Handler;
import android.os.Message;
import android.os.SystemClock;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.ImageView;
import android.widget.TabHost;
import android.widget.TextView;
import cn.cloudartisan.crius.client.android.CIMPushManager;
import cn.cloudartisan.crius.client.constant.CIMConstant;
import cn.cloudartisan.crius.client.model.ReplyBody;
import cn.cloudartisan.crius.client.model.SentBody;
import cn.cloudartisan.crius.R;
import cn.cloudartisan.crius.app.Global;
import cn.cloudartisan.crius.service.CycleLocationService;
import cn.cloudartisan.crius.ui.base.CIMMonitorActivity;
import cn.cloudartisan.crius.ui.contact.AddCenterActivity;

public class HomeActivity extends CIMMonitorActivity implements TabHost.OnTabChangeListener {
    ActionBar actionBar;
    //View contactsTab;
    View trendDashboard;
    View dashBaordFragment;
    View conversationFragment;
    PendingIntent locatePendingIntent;
    TabHost mHost;
    Handler offlineMessagehandler = new Handler() {
        public void handleMessage(Message var1) {
            SentBody var2 = new SentBody();
            var2.setKey(CIMConstant.RequestKey.CLIENT_OFFLINE_MESSAGE);
            var2.put("account", Global.getCurrentUser().getAccount());
            CIMPushManager.sendRequest(HomeActivity.this, var2);
            HomeActivity.this.offlineMessagehandler.removeMessages(var1.what);
        }
    };
    View settingTab;
    
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_home, menu);
        return super.onCreateOptionsMenu(menu);
    }
    
    public void initComponents() {
        this.mHost = (TabHost)this.findViewById(R.id.tabhost);
        this.mHost.setup();
        this.mHost.setOnTabChangedListener(this);
        ((ImageView)this.getDashBaordFragment().findViewWithTag("TAB_ICON")).setImageResource(R.drawable.tab_trend_selector);
        ((ImageView)this.getTrendDashboard().findViewWithTag("TAB_ICON")).setImageResource(R.drawable.tab_trend_1);
        ((ImageView)this.getConversationFragment().findViewWithTag("TAB_ICON")).setImageResource(R.drawable.tab_message_selector);
        ((ImageView)this.getSettingTab().findViewWithTag("TAB_ICON")).setImageResource(R.drawable.tab_my_selector);

        ((TextView)this.getDashBaordFragment().findViewWithTag("TAB_NAME")).setText(R.string.common_dashboard);
        ((TextView)this.getTrendDashboard().findViewWithTag("TAB_NAME")).setText(R.string.common_contacts);
        ((TextView)this.getConversationFragment().findViewWithTag("TAB_NAME")).setText(R.string.common_message);
        ((TextView)this.getSettingTab().findViewWithTag("TAB_NAME")).setText(R.string.common_my);
        this.setLogo(R.drawable.home_logo);
        this.mHost.addTab(this.mHost.newTabSpec("dashboard").setIndicator(this.dashBaordFragment).setContent(R.id.dashBaordFragment));
        this.mHost.addTab(this.mHost.newTabSpec("trendDashboard").setIndicator(this.trendDashboard).setContent(R.id.trendDashboard));
        this.mHost.addTab(this.mHost.newTabSpec("conversation").setIndicator(this.conversationFragment).setContent(R.id.conversationFragment));
        this.mHost.addTab(this.mHost.newTabSpec("my").setIndicator(this.settingTab).setContent(R.id.settingCenterFragment));
            CIMPushManager.bindAccount(this, Global.getCurrentUser().getAccount());
       this.locatePendingIntent = PendingIntent.getService(this, 0, new Intent(this, CycleLocationService.class), 0);
        ((AlarmManager)this.getSystemService(Context.ALARM_SERVICE)).setRepeating(0, SystemClock.elapsedRealtime() + 1000L, 600000L, this.locatePendingIntent);
    }
    
    public void onReplyReceived(ReplyBody reply) {

        if(reply.getKey().equals(CIMConstant.RequestKey.CLIENT_BIND)) {
            if(reply.getCode().equals(CIMConstant.ReturnCode.CODE_200)) {
                getOfflineMessage();
            }
        }
    }
    
    public void getOfflineMessage() {
        offlineMessagehandler.sendMessageDelayed(offlineMessagehandler.obtainMessage(), 0xbb8);
    }
    
    public int getConentLayout() {
        return R.layout.activity_home;
    }
    
    public int getActionBarTitle() {
        return 0x0;
    }
    
    public void onBackPressed() {
        moveTaskToBack(true);
    }
    
    public boolean onOptionsItemSelected(MenuItem item) {
        Intent intent = new Intent();
        switch(item.getItemId()) {
            case R.id.menu_add:
            {
                intent.setClass(this, AddCenterActivity.class);
                startActivity(intent);
                break;
            }
        }
        return super.onOptionsItemSelected(item);
    }
    
    public void onClick(View v) {
    }
    
    public void onDestroy() {
        super.onDestroy();
        ((AlarmManager)getSystemService(Context.ALARM_SERVICE)).cancel(locatePendingIntent);
    }
    
    public View getDashBaordFragment() {
        if(dashBaordFragment == null) {
            dashBaordFragment = LayoutInflater.from(this).inflate(R.layout.layout_home_tab_item, null);
          //  dashBaordFragment = LayoutInflater.from(this).inflate(R.layout.activity_dashboard, null);

        }
        return dashBaordFragment;
    }
    
  /*  public View getContactsTab() {
        if(contactsTab == null) {
            contactsTab = LayoutInflater.from(this).inflate(R.layout.layout_home_tab_item, null);
        }
        return contactsTab;
    }*/

    public View getTrendDashboard() {
        if(trendDashboard == null) {
            trendDashboard = LayoutInflater.from(this).inflate(R.layout.layout_home_tab_item, null);
        }
        return trendDashboard;
    }
    
    public View getConversationFragment() {
        if(conversationFragment == null) {
            conversationFragment = LayoutInflater.from(this).inflate(R.layout.layout_home_tab_item, null);
        }
        return conversationFragment;
    }
    
    public View getSettingTab() {
        if(settingTab == null) {
            settingTab = LayoutInflater.from(this).inflate(R.layout.layout_home_tab_item, null);
        }
        return settingTab;
    }
    
    public void onTabChanged(String tabId) {
       /* if(tabId.equals("conversation")) {
            setTitle(R.string.common_message);
        }*/
          if(tabId.equals("dashboard")) {
            setTitle(R.string.common_dashboard);
        }
        if(tabId.equals("contacts")) {
            setTitle(R.string.common_contacts);
        }
     if(tabId.equals("trendDashboard")) {
            setTitle(R.string.common_trend);
        }
        if(tabId.equals("conversation")) {
            setTitle(R.string.common_message);
        }
        if(tabId.equals("my")) {
            setTitle(R.string.common_my);
        }
    }
}
