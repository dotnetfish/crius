/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package cn.cloudartisan.crius.ui.trend;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import cn.cloudartisan.crius.client.constant.CIMConstant;
import cn.cloudartisan.crius.client.model.Message;
import cn.cloudartisan.crius.R;
import cn.cloudartisan.crius.adapter.CircleListViewAdapter;
import cn.cloudartisan.crius.app.Global;
import cn.cloudartisan.crius.app.URLConstant;
import cn.cloudartisan.crius.bean.Article;
import cn.cloudartisan.crius.bean.Comment;
import cn.cloudartisan.crius.bean.Page;
import cn.cloudartisan.crius.bean.User;
import cn.cloudartisan.crius.component.CirclePullRefreshListView;
import cn.cloudartisan.crius.component.CommentListView;
import cn.cloudartisan.crius.component.SimpleInputPanelView;
import cn.cloudartisan.crius.component.WebImageView;
import cn.cloudartisan.crius.db.ArticleDBManager;
import cn.cloudartisan.crius.db.FriendDBManager;
import cn.cloudartisan.crius.db.MessageDBManager;
import cn.cloudartisan.crius.network.HttpAPIRequester;
import cn.cloudartisan.crius.network.HttpAPIResponser;
import cn.cloudartisan.crius.ui.base.CIMMonitorActivity;
import cn.cloudartisan.crius.util.FileURLBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SNSCircleListActivity extends CIMMonitorActivity implements CirclePullRefreshListView.OnRefreshListener, HttpAPIResponser, CircleListViewAdapter.OnCommentClickListener, SimpleInputPanelView.OnOperationListener, CirclePullRefreshListView.OnScrollingListener {
    protected CircleListViewAdapter adapter;
    CirclePullRefreshListView circleListView;
    HttpAPIRequester commentRequester;
    HttpAPIResponser commentResponser =new HttpAPIResponser() {
        public Map<String, Object> getRequestParams(String code) {
            SNSCircleListActivity.this.apiParams.remove("currentView");
            return SNSCircleListActivity.this.apiParams;
        }

    public void onFailed(Exception var1) {
    }

    public void onRequest() {
    }

    public void onSuccess(Object var1, List var2, Page var3, String var4, String var5) {
        if(CIMConstant.ReturnCode.CODE_200.equals(var4)) {
            cleanCommentInfo();
        }

    }
};
    int currentPage;
    SNSCircleListActivity.DeleteArticleReceiver deleteArticleReceiver;
    SimpleInputPanelView inputPanelView;
    private List<Article> list=new ArrayList<>();
    HttpAPIRequester requester;
    User self;
    
    public void initComponents() {
        setDisplayHomeAsUpEnabled(true);
        self = Global.getCurrentUser();
        circleListView = (CirclePullRefreshListView)findViewById(R.id.circleListView);
        circleListView.setOnRefreshListener(this);
        circleListView.setOnScrollingListener(this);
        inputPanelView = (SimpleInputPanelView)findViewById(R.id.inputPanelView);
        inputPanelView.setOnOperationListener(this);
        ((WebImageView)circleListView.findViewById(R.id.icon)).displayAtBackground(FileURLBuilder.getUserIconUrl(self.getAccount()), R.drawable.icon_head_default);
        list.addAll(ArticleDBManager.getManager().queryArticle(0x1));
        adapter = new CircleListViewAdapter(this, list);
        adapter.setCommentClickListener(this);
        circleListView.setAdapter(adapter);
        requester = new HttpAPIRequester(this);
        commentRequester = new HttpAPIRequester(commentResponser);
        circleListView.doRefresh();
        deleteArticleReceiver = new SNSCircleListActivity.DeleteArticleReceiver();
        registerReceiver(deleteArticleReceiver, deleteArticleReceiver.getIntentFilter());
    }
    
    public void onResume() {
        super.onResume();
        circleListView.showMessageRemind(MessageDBManager.getManager().queryNewMoments(0x3));
    }
    
    public void onClick(View v) {
        if(v.getId() == R.id.icon) {
            Intent intent = new Intent();
            if(self.getAccount().equals(v.getTag().toString())) {
                intent.setClass(this, MyCircleHomeActivity.class);
            } else {
                intent.setClass(this, UCircleHomeActivity.class);
                intent.putExtra("friend", FriendDBManager.getManager().queryFriend(v.getTag().toString()));
            }
            startActivity(intent);
        }
    }
    
    public void onRefresh() {
        currentPage = 0x1;
        requester.execute(null, new TypeReference<SNSCircleListActivity>() { }.getType(), URLConstant.ARTICLE_RELEVANTLIST_URL);
    }
    
    public void onShowNextPage() {
        currentPage = (currentPage + 0x1);
        requester.execute(null, new TypeReference<SNSCircleListActivity>() {
       }.getType(), URLConstant.ARTICLE_RELEVANTLIST_URL);
    }
    
    public void onSuccess(Object data, List datalist, Page page, String code, String url) {
        circleListView.refreshComplete();
        circleListView.showMoreComplete();
        setProgressBarIndeterminateVisibility(false);
        if(CIMConstant.ReturnCode.CODE_200.equals(code)) {
            if((datalist != null) && (!datalist.isEmpty())) {
                if(currentPage == 0x1) {
                    list.clear();
                    ArticleDBManager.getManager().save(datalist);
                }
                list.addAll(datalist);
                adapter.notifyDataSetChanged();
                return;
            }
            if(currentPage > 0x1) {
                currentPage = (currentPage - 0x1);
            }
        }
    }
    
    public void onFailed(Exception e) {
        circleListView.refreshComplete();
        circleListView.showMoreComplete();
    }
    
    public Map getRequestParams(String code) {
        cleanCommentInfo();
        apiParams.put("account", self.getAccount());
        apiParams.put("currentPage", Integer.valueOf(currentPage));
        return apiParams;
    }
    
    public void onRequest() {
        setProgressBarIndeterminateVisibility(true);
    }
    
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if(resultCode == -0x1) {
            Article article = (Article)data.getSerializableExtra("article");
            list.add(0x0, article);
            adapter.notifyDataSetChanged();
            circleListView.setSelection(0x0);
        }
    }
    
    public void onComment(int index, CommentListView currentView, String articleId, String commentId, String authorAccount, String account, String name, String type) {
        if(self.getAccount().equals(account)) {
            cleanCommentInfo();
            inputPanelView.hide();
            return;
        }
        apiParams.put("articleId", articleId);
        apiParams.put("authorAccount", authorAccount);
        apiParams.put("replyAccount", account);
        apiParams.put("replyName", name);
        apiParams.put("name", self.getName());
        apiParams.put("account", self.getAccount());
        apiParams.put("type", type);
        apiParams.put("currentView", currentView);
        apiParams.put("commentId", commentId);
        inputPanelView.show();
        inputPanelView.setHint(getString(R.string.hint_comment, new Object[] {name}));
        circleListView.setSelection(index);
    }
    
    public void onSendContent(String content) {
        HashMap<String, String> map = new HashMap<String, String>();
        map.put("replyAccount", apiParams.get("replyAccount").toString());
        map.put("replyName", apiParams.get("replyName").toString());
        map.put("name", apiParams.get("name").toString());
        map.put("content", content);
        map.put("type", apiParams.get("type").toString());
        if("1".equals(apiParams.get("type"))) {
            map.put("commentId", String.valueOf(apiParams.get("commentId")));
        }
        apiParams.put("content", JSON.toJSONString(map));
        Comment comment = new Comment();
        comment.account = self.getAccount();
        comment.articleId = apiParams.get("articleId").toString();
        comment.content = apiParams.get("content").toString();
        comment.type = apiParams.get("type").toString();
        comment.timestamp = String.valueOf(System.currentTimeMillis());
        appendComment(comment);
        commentRequester.execute(new TypeReference<SNSCircleListActivity>() {}.getType(), null, URLConstant.COMMENT_PUBLISH_URL);
        inputPanelView.hide();
    }
    
    public void cleanCommentInfo() {
        apiParams.remove("replyName");
        apiParams.remove("name");
        apiParams.remove("content");
        apiParams.remove("replyAccount");
        apiParams.remove("type");
        apiParams.remove("commentId");
        apiParams.remove("currentView");
        apiParams.remove("authorAccount");
        inputPanelView.setHint(null);
        inputPanelView.setContent("");
    }
    
    public void appendComment(Comment comment) {
        CommentListView listView = (CommentListView)apiParams.get("currentView");
        listView.appendComment(comment);
    }
    
    public void onScrolling() {
        inputPanelView.hide();
        cleanCommentInfo();
    }
    
    public int getConentLayout() {
        return R.layout.activity_trend_circle;
    }
    
    public int getActionBarTitle() {
        return R.string.label_circle;
    }
    
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.single_icon, menu);
        menu.findItem(R.id.menu_icon).setIcon(R.drawable.icon_article_publish);
        return super.onCreateOptionsMenu(menu);
    }
    
    public boolean onOptionsItemSelected(MenuItem item) {
        switch(item.getItemId()) {
            case R.id.menu_icon:
            {
                Intent intent = new Intent(this, ArticlePublishActivity.class);
                startActivityForResult(intent, 0x8);
                break;
            }
        }
        return super.onOptionsItemSelected(item);
    }
    
    public void onDestroy() {
        unregisterReceiver(deleteArticleReceiver);
        super.onDestroy();
    }
    
    public void onKeyboardShow() {
    }
    
    public void onMessageReceived(Message message) {
        if((message.getType().equals("801")) || (message.getType().equals("802"))) {
            JSONObject json = JSON.parseObject(message.getContent());
            String articleId = json.getString("articleId");
            CommentListView listView = (CommentListView)circleListView.findViewWithTag(articleId);
            if(listView != null) {
                Comment comment = new Comment();
                comment.account = json.getString("account");
                comment.articleId = articleId;
                comment.content = json.getString("content");
                comment.type = json.getString("type");
                comment.timestamp = json.getString("timestamp");
                listView.appendComment(comment);
            }
        }
    }
    public class DeleteArticleReceiver
            extends BroadcastReceiver
    {
        public DeleteArticleReceiver() {}

        public IntentFilter getIntentFilter()
        {
            IntentFilter localIntentFilter = new IntentFilter();
            localIntentFilter.addAction("com.farsunset.cim.DELETE_ARTICLE");
            return localIntentFilter;
        }

        public void onReceive(Context paramContext, Intent paramIntent)
        {
         Article article    = (Article)paramIntent.getSerializableExtra("article");
            if (SNSCircleListActivity.this.list.indexOf(article) >= 0)
            {
                SNSCircleListActivity.this.list.remove(SNSCircleListActivity.this.list.indexOf(article));
                SNSCircleListActivity.this.adapter.notifyDataSetChanged();
            }
        }
    }
}
