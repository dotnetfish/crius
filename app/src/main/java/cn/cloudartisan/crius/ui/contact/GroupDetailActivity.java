/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package cn.cloudartisan.crius.ui.contact;

import android.content.Intent;
import android.util.DisplayMetrics;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.LinearLayout;
import android.widget.TextView;
import com.alibaba.fastjson.TypeReference;
import cn.cloudartisan.crius.client.constant.CIMConstant;
import cn.cloudartisan.crius.R;
import cn.cloudartisan.crius.app.Global;
import cn.cloudartisan.crius.app.URLConstant;
import cn.cloudartisan.crius.bean.*;
import cn.cloudartisan.crius.component.WebImageView;
import cn.cloudartisan.crius.db.ConfigDBManager;
import cn.cloudartisan.crius.db.GroupDBManager;
import cn.cloudartisan.crius.db.GroupMemberDBManager;
import cn.cloudartisan.crius.db.MessageDBManager;
import cn.cloudartisan.crius.network.HttpAPIRequester;
import cn.cloudartisan.crius.network.HttpAPIResponser;
import cn.cloudartisan.crius.ui.base.BaseActivity;
import cn.cloudartisan.crius.util.FileURLBuilder;
import cn.cloudartisan.crius.widget.CustomDialog;

import java.util.List;
import java.util.Map;

public class GroupDetailActivity extends BaseActivity implements HttpAPIResponser, View.OnClickListener, CustomDialog.OnOperationListener, CompoundButton.OnCheckedChangeListener {
    CustomDialog customDialog;
    Group group;
    HttpAPIRequester memberListrequester;
    HttpAPIResponser membersResponser;
    HttpAPIRequester requester;
    User self;
    
    public void initComponents() {
        setDisplayHomeAsUpEnabled(true);
        findViewById(R.id.lookMemberBar).setOnClickListener(this);
        group = (Group)getIntent().getExtras().getSerializable("group");
        self = Global.getCurrentUser();
        ((WebImageView)findViewById(R.id.icon)).load(FileURLBuilder.getGroupIconUrl(group.groupId), R.drawable.grouphead_normal);
        ((TextView)findViewById(R.id.groupId)).setText(group.groupId);
        ((TextView)findViewById(R.id.name)).setText(group.name);
        ((TextView)findViewById(R.id.summary)).setText(group.summary);
        ((TextView)findViewById(R.id.founderAccount)).setText(group.founder);
        ((WebImageView)findViewById(R.id.founderIcon)).load(FileURLBuilder.getUserIconUrl(group.founder), R.drawable.grouphead_normal);
        if(GroupDBManager.getManager().queryGroup(group.groupId) == null) {
            findViewById(R.id.joinButton).setOnClickListener(this);
            findViewById(R.id.joinButton).setVisibility(View.VISIBLE);
            findViewById(R.id.ignoreMessageBar).setVisibility(View.GONE);
        }
        requester = new HttpAPIRequester(this);
        memberListrequester = new HttpAPIRequester(membersResponser);
        memberListrequester.execute(null, new TypeReference<GroupDetailActivity>() {}.getType(), URLConstant.GROUPMEMBER_LIST_URL);
    }
    
    public boolean onCreateOptionsMenu(Menu menu) {
        if(GroupDBManager.getManager().queryGroup(group.groupId) != null) {
            getMenuInflater().inflate(R.menu.group_detailed, menu);
            if("1".equals(ConfigDBManager.getManager().queryValue(group.groupId))) {
                ( (CheckBox)findViewById(R.id.ignoreMessageCheckbox)).setChecked(true);
            }
            ((CheckBox)findViewById(R.id.ignoreMessageCheckbox)).setOnCheckedChangeListener(this);
            customDialog = new CustomDialog(this);
            customDialog.setOperationListener(this);
            if(group.founder.equals(self.getAccount())) {
                customDialog.setTitle(R.string.common_dissolve);
                customDialog.setMessage(getString(R.string.tip_dissolve_group));
                menu.findItem(R.id.bar_menu_delete).setTitle(R.string.common_dissolve);
            } else {
                menu.findItem(R.id.bar_menu_invite).setVisible(false);
                customDialog.setTitle(R.string.common_quit);
                customDialog.setMessage(getString(R.string.tip_quit_group));
                menu.findItem(R.id.bar_menu_delete).setTitle(R.string.common_quit);
            }
            customDialog.setButtonsText(getString(R.string.common_cancel), getString(R.string.common_confirm));
        }
        return super.onCreateOptionsMenu(menu);
    }
    
    public boolean onOptionsItemSelected(MenuItem item) {
        switch(item.getItemId()) {
            case R.id.bar_menu_delete:
            {
                customDialog.show();
                break;
            }
            case R.id.bar_menu_invite:
            {
                Intent inviteIntent = new Intent(this, InviteGroupMemberActivity.class);
                inviteIntent.putExtra("group", group);
                startActivity(inviteIntent);
                break;
            }
        }
        return super.onOptionsItemSelected(item);
    }
    
    public void onResume() {
        super.onResume();
        displayMembersIcon();
    }
    
    public void onClick(View v) {
        switch(v.getId()) {
            case R.id.lookMemberBar:
            {
                Intent memberIntent = new Intent(this, GroupMemberListActivity.class);
                memberIntent.putExtra("group", group);
                startActivity(memberIntent);
                return;
            }
            case R.id.joinButton:
            {
                Intent intent = new Intent(this, AllyRequestActivity.class);
                intent.putExtra("group", group);
                startActivity(intent);
                break;
            }
        }
    }
    
    public void onLeftClick() {
        customDialog.dismiss();
    }
    
    public void onRightClick() {
        customDialog.dismiss();
        if(group.founder.equals(self.getAccount())) {
            requester.execute(new TypeReference<GroupDetailActivity>() {}.getType(), null, URLConstant.GROUP_DISBAND_URL);
            return;
        }
        requester.execute(new TypeReference<GroupDetailActivity>() {}.getType(), null, URLConstant.GROUPMEMBER_REMOVE_URL);
    }
    
    public void onSuccess(Object data, List list, Page page, String code, String url) {
        hideProgressDialog();
        if(CIMConstant.ReturnCode.CODE_200.equals(code)) {
            if(group.founder.equals(self.getAccount())) {
                showToast(R.string.tip_group_dissolve_complete);
            } else {
                apiParams.put("content", getString(R.string.tip_quit_group_completed, new Object[] {self.getName(), group.getTitle()}));
                apiParams.put("sender", "system");
                apiParams.put("receiver", group.founder);
                apiParams.put("type", "2");
                HttpAPIRequester.execute(apiParams, URLConstant.MESSAGE_SEND_URL);
                showToast(R.string.tip_group_quit_complete);
            }
            GroupDBManager.getManager().deleteGroup(group.groupId);
            MessageDBManager.getManager().deleteBySender(group.groupId);
            Intent intent = new Intent();
            intent.setAction("com.farsunset.cim.DELETE_APPEND");
            intent.putExtra(ChatItem.NAME, new ChatItem(group));
            sendBroadcast(intent);
            finish();
        }
    }
    
    public void onFailed(Exception e) {
        hideProgressDialog();
    }
    
    public Map getRequestParams(String code) {
        apiParams.put("founder", self.getAccount());
        apiParams.put("account", self.getAccount());
        apiParams.put("groupId", group.groupId);
        return apiParams;
    }
    
    public void onRequest() {
        if(group.founder.equals(self.getAccount())) {
            showProgressDialog(getString(R.string.tip_loading, new Object[] {getString(R.string.common_dissolve)}));
            return;
        }
        showProgressDialog(getString(R.string.tip_loading, new Object[] {getString(R.string.common_quit)}));
    }
    
    public void onCheckedChanged(CompoundButton compoundbutton, boolean flag) {
        if(R.id.ignoreMessageCheckbox == compoundbutton.getId()) {
            ConfigDBManager.getManager().saveConfig(group.groupId, "0");
        }
    }
    
    private void displayMembersIcon() {
        group.memberList = GroupMemberDBManager.getManager().queryMemberList(group.groupId);
        LinearLayout scrollView = (LinearLayout)findViewById(R.id.memberScrollView);
        scrollView.removeAllViews();
        int side = getResources().getDimensionPixelOffset(R.dimen.group_member_grid_height);
        DisplayMetrics dm = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(dm);
        int maxSize = dm.widthPixels / side;
        LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(-0x2, -0x2);
        lp.setMargins(0xa, 0x0, 0x0, 0x0);
        lp.width = side;
        lp.height = side;

        for(int i=0;i<group.memberList.size() && i<=maxSize+1;i++){
            WebImageView image = (WebImageView)LayoutInflater.from(this).inflate(R.layout.layout_group_member_grid, null);
            image.load(FileURLBuilder.getUserIconUrl(((GroupMember)group.memberList.get(i)).account), R.drawable.icon_head_default);
            image.setLayoutParams(lp);
            scrollView.addView(image);
        }

    }
    
    public int getConentLayout() {
        return R.layout.activity_group_detail;
    }
    
    public int getActionBarTitle() {
        return R.string.label_group_detail;
    }
}
