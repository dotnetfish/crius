/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package cn.cloudartisan.crius.ui.contact;

import android.view.Menu;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import com.alibaba.fastjson.TypeReference;
import cn.cloudartisan.crius.client.constant.CIMConstant;
import cn.cloudartisan.crius.R;
import cn.cloudartisan.crius.app.Global;
import cn.cloudartisan.crius.app.URLConstant;
import cn.cloudartisan.crius.bean.*;
import cn.cloudartisan.crius.message.parser.MessageParserFactory;
import cn.cloudartisan.crius.network.HttpAPIRequester;
import cn.cloudartisan.crius.network.HttpAPIResponser;
import cn.cloudartisan.crius.ui.base.BaseActivity;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AllyRequestActivity extends BaseActivity implements HttpAPIResponser {
    Group group;
    Message message;
   HttpAPIRequester requester;
  //  ContactService service;
    Friend user;
    
    public void initComponents() {
        setDisplayHomeAsUpEnabled(true);
        user = (Friend)getIntent().getExtras().getSerializable("user");
        group = (Group)getIntent().getExtras().getSerializable("group");
       requester = new HttpAPIRequester(this);
        //service=new ContactService((HttpAPIResponser)this);
    }
    
    public void onClick(View v) {
        switch(v.getId()) {
            case R.id.button:
            {
                sendAllyRequest();
                break;
            }
        }
    }
    
    public void sendAllyRequest() {
        String token = ((EditText)findViewById(R.id.token)).getText().toString();
        User source = Global.getCurrentUser();
        HashMap<String, Object> inputData = new HashMap<String, Object>();
        inputData.put("user", source);
        inputData.put("requestMsg", token);
        if(user != null) {
            message.type = "100";
            message.receiver = user.account;
        } else {
            message.type = "102";
            message.receiver = group.founder;
            inputData.put("groupId", group.groupId);
            inputData.put("groupName", group.getTitle());
        }
        inputData.put("message", message);
        MessageParserFactory.getFactory().getMessageParser(message.type).encodeContent(inputData);
      requester.execute(new TypeReference<AllyRequestActivity>() {}.getType(),
                null,
                URLConstant.MESSAGE_SEND_URL);
       // service.SendMessage();
    }
    
    public void onSuccess(Object data, List list, Page page, String code, String url) {
        hideProgressDialog();
        if(CIMConstant.ReturnCode.CODE_200.equals(code)) {
            showToast(R.string.tip_send_request_complete);
            finish();
        }
    }
    
    public void onFailed(Exception e) {
        hideProgressDialog();
    }
    
    public Map getRequestParams(String code) {
        apiParams.put("content", message.content);
        apiParams.put("title", message.title);
        apiParams.put("sender", message.sender);
        apiParams.put("receiver", message.receiver);
        apiParams.put("type", message.type);
        return apiParams;
    }
    
    public void onRequest() {
        showProgressDialog(getString(R.string.tip_loading, new Object[] {getString(R.string.common_handle)}));
    }
    
    public int getConentLayout() {
        return R.layout.activity_ally_request;
    }
    
    public int getActionBarTitle() {
        return R.string.title_contacts_verify;
    }
    
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.single_button, menu);
        Button button = (Button)menu.findItem(R.id.menu_button).getActionView().findViewById(R.id.button);
        button.setOnClickListener(this);
        return super.onCreateOptionsMenu(menu);
    }
}
