/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package cn.cloudartisan.crius.ui.chat;

import android.view.View;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import cn.cloudartisan.crius.R;
import cn.cloudartisan.crius.bean.Message;
import cn.cloudartisan.crius.network.FileDownloader;
import cn.cloudartisan.crius.ui.base.BaseActivity;
import cn.cloudartisan.crius.ui.helper.FileViewHelper;
import cn.cloudartisan.crius.util.FileTypeIconBuilder;
import cn.cloudartisan.crius.util.FileURLBuilder;
import cn.cloudartisan.crius.util.FileUtil;

import java.io.File;
import java.text.DecimalFormat;

public class FileViewerActivity extends BaseActivity implements FileDownloader.FileDownloadCallBack {
    final int ACTION_SHEET_STOP_BUTTON=0;
    FileDownloader downloader;
    File file;
    final DecimalFormat format=new DecimalFormat("");
    Long mFileSize;
    Message message;
    JSONObject orgFileinfo;
    String threadKey;
    
    public void initComponents() {
        message = (Message)getIntent().getSerializableExtra("message");
        setDisplayHomeAsUpEnabled(true);
        orgFileinfo = JSON.parseObject(message.content);
        mFileSize = orgFileinfo.getLong("size");
        findViewById(R.id.openFileButton).setOnClickListener(this);
        findViewById(R.id.downLoadButton).setOnClickListener(this);
        findViewById(R.id.stopDownLoadButton).setOnClickListener(this);
        ((TextView)findViewById(R.id.currentFileName)).setText(orgFileinfo.getString("name"));
        ((TextView)findViewById(R.id.currentFileSize)).setText(FileUtil.getSizeName(orgFileinfo.getLong("size").longValue()));
        ((ImageView)findViewById(R.id.currentFileIcon)).setImageResource(FileTypeIconBuilder.create(this).getFileIcon(orgFileinfo.getString("name"), true));
        if(FileUtil.isFileExist("/" + orgFileinfo.get("name"))) {
            file = new File("/" + orgFileinfo.get("name"));
            findViewById(R.id.openFileButton).setVisibility(View.VISIBLE);
            return;
        }
        if(FileUtil.isFileExist("/" + orgFileinfo.getString("file"))) {
            file = new File("/" + orgFileinfo.getString("file"));
            findViewById(R.id.openFileButton).setVisibility(View.VISIBLE);
            return;
        }
        findViewById(R.id.downLoadButton).setVisibility(View.VISIBLE);
    }
    
    public void onClick(View v) {
        switch(v.getId()) {
            case R.id.openFileButton:
            {
                startActivity(FileViewHelper.create(this).openFile(file.getAbsolutePath()));
                return;
            }
            case R.id.downLoadButton:
            {
                findViewById(R.id.downLoadButton).setVisibility(View.GONE);
                findViewById(R.id.downloadPanel).setVisibility(View.VISIBLE);
                file = FileUtil.creatSDFile("/" + orgFileinfo.get("name"));
                downloader = FileDownloader.getInstance();
                downloader.setOnDownloadCallBack(this);
                threadKey = downloader.download(FileURLBuilder.getFileUrl(message.file), file);
                return;
            }
            case 1:
            {
                FileDownloader.getInstance().stop(threadKey);
                findViewById(R.id.downloadPanel).setVisibility(View.GONE);
                findViewById(R.id.downLoadButton).setVisibility(View.VISIBLE);
                findViewById(R.id.openFileButton).setVisibility(View.GONE);
                ( (TextView)findViewById(R.id.progressSizeText)).setText("");
                ( (TextView)findViewById(R.id.progressTxt)).setText("");
                ((ProgressBar)findViewById(R.id.fileProgressBar)).setProgress(0x0);
                break;
            }
        }
    }
    
    public void progress(String threadKey, long fileSize, long downloadSize) {
        if(mFileSize.longValue() == 0x0) {
            mFileSize = Long.valueOf(fileSize);
        }
        if(mFileSize.longValue()  != 0) {
            ( (TextView)findViewById(R.id.progressSizeText)).setText("/" + FileUtil.getSizeName(mFileSize.longValue()));
            ((TextView)findViewById(R.id.progressTxt)).setText("%");
            ((ProgressBar)findViewById(R.id.fileProgressBar)).setProgress((int)((0x64 * downloadSize) / mFileSize.longValue()));
        }
        if((downloadSize >= mFileSize.longValue()) || (downloadSize >= fileSize) && (fileSize > 0x0)) {
            showToast(getString(R.string.tip_file_download_complete, new Object[] {file.getAbsolutePath()}));
            findViewById(R.id.downloadPanel).setVisibility(View.GONE);
            findViewById(R.id.openFileButton).setVisibility(View.VISIBLE);
        }
    }
    
    public void statusChange(String threadKey, int status) {
        if(0x1 == status) {
            findViewById(R.id.openFileButton).setVisibility(View.GONE);
            file.delete();
        }
        if(0x4 == status) {
            findViewById(R.id.downloadPanel).setVisibility(View.GONE);
            findViewById(R.id.downLoadButton).setVisibility(View.VISIBLE);
            findViewById(R.id.openFileButton).setVisibility(View.GONE);
            (  (TextView)findViewById(R.id.progressSizeText)).setText("");
            ((TextView)findViewById(R.id.progressTxt)).setText("");
            ((ProgressBar)findViewById(R.id.fileProgressBar)).setProgress(0x0);
            showToast(getString(R.string.tip_file_download_failed));
            file.delete();
        }
    }
    
    public int getConentLayout() {
        return R.layout.activity_file_viewer;
    }
    
    public int getActionBarTitle() {
        return R.string.label_file_info;
    }
}
