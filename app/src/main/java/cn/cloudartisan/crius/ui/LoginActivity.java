/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package cn.cloudartisan.crius.ui;

import android.content.Intent;
import android.graphics.Bitmap;
import android.os.Process;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.view.View;
import android.view.animation.AnimationUtils;
import android.widget.Button;
import android.widget.EditText;
import com.alibaba.fastjson.JSONObject;

import com.alibaba.fastjson.TypeReference;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.assist.FailReason;
import com.nostra13.universalimageloader.core.display.RoundedBitmapDisplayer;
import com.nostra13.universalimageloader.core.listener.ImageLoadingListener;

import cn.cloudartisan.crius.app.CriusApplication;
import cn.cloudartisan.crius.client.android.CIMPushManager;
import cn.cloudartisan.crius.R;
import cn.cloudartisan.crius.app.Global;
import cn.cloudartisan.crius.bean.Page;
import cn.cloudartisan.crius.bean.User;
import cn.cloudartisan.crius.component.WebImageView;
import cn.cloudartisan.crius.db.GlobalDatabaseHelper;
import cn.cloudartisan.crius.network.HttpAPIRequester;
import cn.cloudartisan.crius.network.HttpAPIResponser;
import cn.cloudartisan.crius.service.CycleLocationService;
import cn.cloudartisan.crius.service.adapter.ServiceAdapterFactory;
import cn.cloudartisan.crius.service.adapter.Adapter;
import cn.cloudartisan.crius.ui.base.BaseActivity;
import cn.cloudartisan.crius.util.FileURLBuilder;

//import org.springframework.context.ApplicationContext;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LoginActivity extends BaseActivity implements TextWatcher, HttpAPIResponser, ImageLoadingListener {
    EditText accountEdit;
    WebImageView icon;
    Button loginButton;
    DisplayImageOptions options;
    EditText passwordEdit;
    HttpAPIRequester requester;
    User self;
    
    public void initComponents() {
        getActionBar().hide();
        GlobalDatabaseHelper.destoryAll();
        self = Global.getCurrentUser();
        icon = (WebImageView)findViewById(R.id.icon);
        findViewById(R.id.label_register).setOnClickListener(this);
        accountEdit = (EditText)findViewById(R.id.account);
        passwordEdit = (EditText)findViewById(R.id.password);
        loginButton = (Button)findViewById(R.id.login_button);
        loginButton.setOnClickListener(this);
        accountEdit.addTextChangedListener(new TextWatcher() {

            public void afterTextChanged(Editable arg0) {
            }
            
            public void beforeTextChanged(CharSequence arg0, int arg1, int arg2, int arg3) {
            }
            
            public void onTextChanged(CharSequence text, int arg1, int arg2, int arg3) {
                icon.setImageBitmap(null);
                if(!TextUtils.isEmpty(text.toString().trim())) {
                    //TODO: 此处逻辑应该是 判断是否本机登陆过，如果登陆过才不需要验证密码显示头像
                    String url= FileURLBuilder.getUserIconUrl(text.toString().trim());
                   ImageLoader.getInstance().displayImage(
                          url,
                            icon, options,
                            LoginActivity.this);
                }
               // onTextChanged(text, arg1, arg2, arg3);
            }
        });
        if(passwordEdit.getText().length()>0){
            loginButton.setEnabled(true);
        }
        passwordEdit.addTextChangedListener(this);
        requester = new HttpAPIRequester(this);
        DisplayImageOptions.Builder builder = new DisplayImageOptions.Builder();
        builder.cacheInMemory(false);
        builder.displayer(new RoundedBitmapDisplayer(0xc8));
        options = builder.build();
        if(self != null) {
            ImageLoader.getInstance().displayImage(
                    FileURLBuilder.getUserIconUrl(self.getAccount()),
                    icon,
                    options,
                    this);
            accountEdit.setText(self.getAccount());
            passwordEdit.requestFocus();
        }
    }
    
    public int getConentLayout() {
        return R.layout.activity_login;
    }
    
    public int getActionBarTitle() {
        return R.string.label_login;
    }
    
    public void onClick(View v) {
        switch(v.getId()) {
            case R.id.login_button:
            {
                //ToDo:for debug write hard code,
              /* User user=new User();
                user.setAccount("superstudio");//="superstudio";
                user.setGender("0");//="0";
                user.setName("superman");//="superman";*/

                requester.login(new TypeReference<LoginActivity>() {
                }.getType(), null, "http://www.cloudartisan.cn/mvc/generalhandler.ashx?controller=AccountController&action=Login");
                return;
            }
            case R.id.label_register:
            {
                startActivity(new Intent(this, RegisterActivity.class));
                break;
            }
        }
    }
    
    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
    }
    
    public void onTextChanged(CharSequence s, int start, int before, int count) {
        if(accountEdit.getText().toString().length() <= 0) {
            if(findViewById(R.id.accountInputView).getVisibility() == View.GONE) {
                findViewById(R.id.accountInputView).setVisibility(View.VISIBLE);
            }
        }
        if(passwordEdit.getText().toString().length() > 0) {
            loginButton.setEnabled(true);
            return;
        }
        loginButton.setEnabled(false);
    }
    
    public void afterTextChanged(Editable s) {
    }
    
    public void onSuccess(Object data, List list, Page page, String code, String url) {
        JSONObject json=(JSONObject)data;
        hideProgressDialog();
        if(json!=null && json.getBoolean("success")){
            Adapter<User> userAdapter=ServiceAdapterFactory.getUserAdapter();
            User user=userAdapter.fromJson(json);


            try {
               // ApplicationContext context = CriusApplication.getInstance().getBBitContext();
              //  UserService userService = (UserService) context.getBean("buaAccessClientUserService");
               // com.beyondbit.sao.client.domain.bua.User buaUser = userService.getUserInfo(accountEdit.getText().toString().trim());
               // user.setGender(buaUser.getUserSex());
               // user.setName(buaUser.getUserFullName());
               // user.setPassword(buaUser.get);
            }catch (Exception ex){

            }

            //user.set
            Global.setCurrentUser(user);
            Intent intent = new Intent(this, HomeActivity.class);
            startActivity(intent);
            CriusApplication.finishTarget(WelcomeActivity.class);
            finish();

        }else{
            String str=json.getString("message");
            showToast(str);
        }
    /* if(CIMConstant.ReturnCode.CODE_200.equals(code)) {
            Global.setCurrentUser((User) data);
            Intent intent = new Intent(this, HomeActivity.class);
            startActivity(intent);
            CriusApplication.finishTarget(WelcomeActivity.class);
            finish();
        }
        hideProgressDialog();
        if(CIMConstant.ReturnCode.CODE_403.equals(code)) {
            showToast(R.string.tip_account_or_password_error);
        }*/
    }
    
    public void onFailed(Exception e) {
        hideProgressDialog();
    }
    
    public Map getRequestParams(String code) {
        HashMap<String, Object> apiParams = new HashMap<String, Object>();
        apiParams.put("account", accountEdit.getText().toString().trim());
       apiParams.put("pwd", passwordEdit.getText().toString().trim());
     apiParams.put("DeviceMAC", "admin");
        apiParams.put("source", "admin");
       apiParams.put("siteId", "1");
      //  apiParams.put("successUrl", "http://www.yljr888.com");
        return apiParams;
    }
    
    public void onRequest() {
        showProgressDialog(getString(R.string.tip_loading, new Object[] {getString(R.string.label_login)}));
    }
    
    public void onBackPressed() {
        if(getIntent().getStringExtra("source") == null) {
            CIMPushManager.destory(this);
          stopService(new Intent(this, CycleLocationService.class));
            Process.killProcess(Process.myPid());
        }
        finish();
    }
    
    public void onLoadingComplete(String arg0, View arg1, Bitmap arg2) {
        icon.startAnimation(AnimationUtils.loadAnimation(this, R.anim.appear));
    }
    
    public void onLoadingFailed(String arg0, View arg1, FailReason arg2) {
        icon.setImageBitmap(null);
    }
    
    public void onLoadingCancelled(String arg0, View arg1) {
    }
    
    public void onLoadingStarted(String arg0, View arg1) {
    }
}
