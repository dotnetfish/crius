/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package cn.cloudartisan.crius.ui.trend;

import android.content.Intent;
import android.media.SoundPool;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.animation.Animation;
import android.view.animation.AnimationSet;
import android.view.animation.AnimationUtils;
import android.widget.RelativeLayout;
import android.widget.TextView;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import cn.cloudartisan.crius.R;
import cn.cloudartisan.crius.app.ClientConfig;
import cn.cloudartisan.crius.app.Global;
import cn.cloudartisan.crius.app.URLConstant;
import cn.cloudartisan.crius.bean.Friend;
import cn.cloudartisan.crius.bean.Page;
import cn.cloudartisan.crius.bean.ShakeRecord;
import cn.cloudartisan.crius.bean.User;
import cn.cloudartisan.crius.component.WebImageView;
import cn.cloudartisan.crius.db.ShakeRecordDBManager;
import cn.cloudartisan.crius.network.HttpAPIRequester;
import cn.cloudartisan.crius.network.HttpAPIResponser;
import cn.cloudartisan.crius.ui.base.BaseActivity;
import cn.cloudartisan.crius.ui.contact.UserDetailActivity;
import cn.cloudartisan.crius.util.ShakeListener;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

public class SNSShakeActivity extends BaseActivity implements HttpAPIResponser, ShakeListener.OnShakeListener {
    AnimationSet bottomAnimationSet;
    private RelativeLayout mImgDn;
    private RelativeLayout mImgUp;
    ShakeListener mShakeListener;
    Animation matchApperAnimation;
    Animation matchDisApperAnimation;
    View matchUserInfoPanel;
    View progressView;
    HttpAPIRequester requester;
    User self;
    View shakeBottomLine;
    View shakeTopLine;
    private boolean isOn=false;
    private SoundPool sndPool;
    private HashMap<Integer, Integer> soundPoolMap=new HashMap<>();
    AnimationSet topAnimationSet;
    
    public void onClick(View v) {
        if(v.getId() == R.id.userpanel) {
            Intent intent = new Intent(this, UserDetailActivity.class);
            intent.putExtra("user", (Friend)matchUserInfoPanel.getTag());
            startActivity(intent);
        }
    }
    
    public void initComponents() {
        setDisplayHomeAsUpEnabled(true);
        loadSound();
        initAnimations();
        self = Global.getCurrentUser();
        matchUserInfoPanel = findViewById(R.id.userpanel);
        shakeTopLine = findViewById(R.id.shakeTopLine);
        shakeBottomLine = findViewById(R.id.shakeBottomLine);
        progressView = findViewById(R.id.progress_view);
        requester = new HttpAPIRequester(this);
        mImgUp = (RelativeLayout)findViewById(R.id.shakeImgUp);
        mImgDn = (RelativeLayout)findViewById(R.id.shakeImgDown);
        mShakeListener = new ShakeListener(this);
        mShakeListener.setOnShakeListener(this);
        matchUserInfoPanel.setOnClickListener(this);
    }
    
    public void initAnimations() {
        matchApperAnimation = AnimationUtils.loadAnimation(this, R.anim.slide_in_from_bottom);
        matchApperAnimation.setAnimationListener(new Animation.AnimationListener() {

            public void onAnimationStart(Animation animation) {
                matchUserInfoPanel.setVisibility(View.VISIBLE);
            }
            
            public void onAnimationRepeat(Animation animation) {
            }
            
            public void onAnimationEnd(Animation animation) {
            }
        });
        matchDisApperAnimation = AnimationUtils.loadAnimation(this, R.anim.slide_out_to_bottom);
        matchDisApperAnimation.setAnimationListener(new Animation.AnimationListener() {

            public void onAnimationStart(Animation animation) {
            }
            
            public void onAnimationRepeat(Animation animation) {
            }
            
            public void onAnimationEnd(Animation animation) {

                matchUserInfoPanel.setVisibility(View.GONE);
            }
        });
        topAnimationSet = (AnimationSet)AnimationUtils.loadAnimation(this, R.anim.shake_top_translate);
        topAnimationSet.setAnimationListener(new Animation.AnimationListener() {

            public void onAnimationStart(Animation animation) {
                shakeTopLine.setVisibility(View.VISIBLE);
            }
            
            public void onAnimationRepeat(Animation animation) {
            }
            
            public void onAnimationEnd(Animation animation) {
                shakeTopLine.setVisibility(View.GONE);
            }
        });
        bottomAnimationSet = (AnimationSet)AnimationUtils.loadAnimation(this, R.anim.shake_bottom_translate);
        bottomAnimationSet.setAnimationListener(new Animation.AnimationListener() {

            public void onAnimationStart(Animation animation) {
                shakeBottomLine.setVisibility(View.VISIBLE);
            }
            
            public void onAnimationRepeat(Animation animation) {
            }
            
            public void onAnimationEnd(Animation animation) {
                shakeBottomLine.setVisibility(View.GONE);
                //progressView.setVisibility(View.VISIBLE);
            }
        });
    }
    
    public void onShake() {

        mShakeListener.unregisterListener();
        if(isOn)return;
        this.progressView.setVisibility(View.VISIBLE);
        matchUserInfoPanel.startAnimation(matchDisApperAnimation);
        startAnimations();
        payShakeSound(0x0);
        isOn=true;
        requester.execute(new TypeReference<SNSShakeActivity>() { }.getType(), null, URLConstant.SHAKE_GET_URL);
    }
    
    public void payShakeSound(int i) {
        if(ClientConfig.shakeSoundIsEnable()) {
            sndPool.play(soundPoolMap.get(i), 1f, 1f, 0x0, 0x0, 1.2f);
        }
    }
    
    public int getConentLayout() {
        return R.layout.activity_snsshake;
    }
    
    public int getActionBarTitle() {
        return R.string.label_function_shake;
    }
    
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_setting, menu);
        return super.onCreateOptionsMenu(menu);
    }
    
    public boolean onOptionsItemSelected(MenuItem item) {
        startActivity(new Intent(this, ShakeSettingActivity.class));
        return super.onOptionsItemSelected(item);
    }
    
    private void loadSound() {
        sndPool = new SoundPool(0x2, 0x1, 0x5);
        try {
            soundPoolMap.put(0,
                    sndPool.load(getAssets().openFd("sound/shake_sound_male.mp3"), 0x1));
            soundPoolMap.put(1,
                    sndPool.load(getAssets().openFd("sound/shake_match.mp3"), 0x1));
            return;
        } catch(IOException e) {
            e.printStackTrace();
        }
    }
    
    public void startAnimations() {
        mImgUp.startAnimation(topAnimationSet);
        mImgDn.startAnimation(bottomAnimationSet);
    }
    
    public void onSuccess(Object data, List list, Page page, String code, String url) {

        if(!this.isDestroyed()) {
            this.mShakeListener.registerListener();
            this.progressView.setVisibility(View.GONE);
            JSONObject json=(JSONObject)data;
            //Boolean isSuccess=
            if(json.getBoolean("success")) {
                if(json.getBoolean("result")) {
                    this.payShakeSound(1);
                   ((WebImageView)this.findViewById(R.id.icon)).displayResouce(R.drawable.corn);
                    ShakeRecord record=new ShakeRecord();
                    record.account= UUID.randomUUID().toString();
                    record.name="积分";
                    record.gender=String.valueOf(json.get("points"));
                    ShakeRecordDBManager.getManager().saveShakeRecord(record);
                              }else {
                    ((WebImageView)this.findViewById(R.id.icon)).displayResouce(R.drawable.f_static_016);
                            }
                this.matchUserInfoPanel.startAnimation(this.matchApperAnimation);
                this.matchUserInfoPanel.setTag(json);
                ((TextView)this.findViewById(R.id.shake_result))
                        .setText((String)json.get("description"));
            }
           /* if(code.equals(CIMConstant.ReturnCode.CODE_200) && data instanceof Friend) {
                this.payShakeSound(1);
                Friend var6 = (Friend)data;
                ((WebImageView)this.findViewById(R.id.icon)).load(FileURLBuilder.getUserIconUrl(var6.account), R.drawable.icon_head_default);
                this.matchUserInfoPanel.startAnimation(this.matchApperAnimation);
                this.matchUserInfoPanel.setTag(var6);
                ((TextView)this.findViewById(R.id.username)).setText(var6.name);
                if(var6.longitude != null || var6.latitude != null) {
                    ((TextView)this.findViewById(R.id.location)).setText("\u76f8\u8ddd" + AppTools.transformDistance(
                            Double.parseDouble(this.self.getLongitude()), Double.parseDouble(this.self.getLatitude()),
                            Double.parseDouble(var6.longitude), Double.parseDouble(var6.latitude)));
                }

                if("0".equals(var6.gender)) {
                    ((ImageView)this.findViewById(R.id.gender)).setImageResource(R.drawable.icon_lady);
                    ((ImageView)this.findViewById(R.id.gender)).setVisibility(View.VISIBLE);
                }

                if("1".equals(var6.gender)) {
                    ((ImageView)this.findViewById(R.id.gender)).setImageResource(R.drawable.icon_man);
                    ((ImageView)this.findViewById(R.id.gender)).setVisibility(View.VISIBLE);
                }

                ShakeRecordDBManager.getManager().saveShakeRecord(ShakeRecord.toShakeRecord(var6));
                return;
            }*/
        }
        isOn=false;
    }
    
    public void onFailed(Exception e) {
        if(isDestroyed()) {
            return;
        }
        mShakeListener.registerListener();
        progressView.setVisibility(View.GONE);
    }
    
    public Map getRequestParams(String code) {
        apiParams.put("account", self.getAccount());
        return apiParams;
    }
    
    public void onRequest() {
    }
    
    public void onDestroy() {
        super.onDestroy();
        mShakeListener.unregisterListener();
        mShakeListener = null;
    }
    
    public void onPause() {
        super.onPause();
        mShakeListener.unregisterListener();
    }
    
    public void onResume() {
        super.onResume();
        mShakeListener.registerListener();
    }
}
