/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package cn.cloudartisan.crius.ui.chat;

import android.app.AlarmManager;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Bitmap;
import android.media.MediaRecorder;
import android.os.Handler;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import com.alibaba.fastjson.JSON;
import com.nostra13.universalimageloader.core.ImageLoader;
import cn.cloudartisan.crius.R;
import cn.cloudartisan.crius.adapter.ChatListViewAdapter;
import cn.cloudartisan.crius.app.Constant;
import cn.cloudartisan.crius.app.Global;
import cn.cloudartisan.crius.app.GlobalMediaPlayer;
import cn.cloudartisan.crius.app.GlobalVoicePlayer;
import cn.cloudartisan.crius.bean.*;
import cn.cloudartisan.crius.component.ChatListView;
import cn.cloudartisan.crius.component.CustomInputPanelView;
import cn.cloudartisan.crius.component.SimpleInputPanelView;
import cn.cloudartisan.crius.component.ToMessageView;
import cn.cloudartisan.crius.db.FriendDBManager;
import cn.cloudartisan.crius.db.MessageDBManager;
import cn.cloudartisan.crius.ui.base.CIMMonitorActivity;
import cn.cloudartisan.crius.ui.contact.AllyRequestActivity;
import cn.cloudartisan.crius.ui.contact.GroupDetailActivity;
import cn.cloudartisan.crius.ui.contact.UserDetailActivity;
import cn.cloudartisan.crius.util.*;
import org.apache.commons.io.FileUtils;

import java.io.File;
import java.io.IOException;
import java.util.*;

public class FriendChatActivity extends CIMMonitorActivity implements ChatListView.OnPreviouListener, SimpleInputPanelView.OnOperationListener, ChatListView.OnTouchDownListenter {
    public ChatListViewAdapter adapter;
    public ChatListView chatListView;
    public int currentPage;
    CustomInputPanelView customInputPanelView;
    public long endTime;
    boolean isVoiceRecording;
    protected Message lastMessage;
    private MediaRecorder mediaRecorder;
    public ArrayList<Message> messageList=new ArrayList<>();
    MessageItemSource messageSource;
    public String messageType="0";
    FriendChatActivity.RecordBroadcastReceiver recordBroadcastReceiver;
    PendingIntent recordPendingIntent;
    Intent recordReceiverIntent;
    TextView recordTime;
    TextView recordingHint;
    public User self;
    public long startTime;
    Button voiceButton;
    public File voiceFile;
    View voiceRecordingPanel;
    Handler recordHandler = new Handler() {
        public void handleMessage(android.os.Message var1) {
            long var3 = System.currentTimeMillis();
            int var2 = (int)((var3 - FriendChatActivity.this.startTime) / 1000L);
            if(var2 >= 60) {
                FriendChatActivity.this.endTime = var3;
                FriendChatActivity.this.recordCompleted(true);
            } else if(var2 < 10) {
                FriendChatActivity.this.recordTime.setText("00:0" + var2);
            } else {
                FriendChatActivity.this.recordTime.setText("00:" + var2);
            }

            if(FriendChatActivity.this.isVoiceRecording) {
                FriendChatActivity.this.recordHandler.sendMessageDelayed(FriendChatActivity.this.recordHandler.obtainMessage(), 1000L);
            }

        }
    };
    public void initComponents() {
        messageSource = getMessageSource();
        setDisplayHomeAsUpEnabled(true);
        setTitle(messageSource.getName());
        self = Global.getCurrentUser();
        chatListView = (ChatListView)findViewById(R.id.chat_list);
        chatListView.setOnPreviouListener(this);
        customInputPanelView = (CustomInputPanelView)findViewById(R.id.customInputPanelView);
        customInputPanelView.setOnOperationListener(this);
        voiceButton = (Button)findViewById(R.id.voiceButton);
        self = Global.getCurrentUser();
        adapter = new ChatListViewAdapter(this, messageList, getMessageSource());
        chatListView.setAdapter(adapter);
        chatListView.setOnTouchDownListenter(this);
        loadChatRecord();
        recordBroadcastReceiver = new FriendChatActivity.RecordBroadcastReceiver();
        registerReceiver(recordBroadcastReceiver, recordBroadcastReceiver.getIntentFilter());
        recordReceiverIntent = new Intent("ACTION_RECORDING");
        recordPendingIntent = PendingIntent.getBroadcast(this, 0x0, recordReceiverIntent, 0x0);
    }
    
    public void onResume() {
        super.onResume();
        if(getMessageSource() == null) {
            lastMessage = null;
            finish();
        }
    }
    
    public String[] getIncludedMsgTypes() {
        String[] types = {"0"};
        return types;
    }
    
    public void loadChatRecord() {
        List<Message> data = MessageDBManager.getManager().queryMessage(messageSource.getId(), getIncludedMsgTypes(), currentPage);
        Message message=new Message();
        message.sender="15216700472";
        message.content="sdfasd ";
        message.createTime=String.valueOf(new Date().getTime());
        message.gid="1";
        message.fileType="0";
        data.add(0,message);
        if((data != null) && (!data.isEmpty())) {
            messageList.addAll(data);
            Collections.sort(messageList, new ChatRecordTimeAscComparator());
            adapter.notifyDataSetChanged();
            if(currentPage == 0x1) {
                chatListView.setSelection(messageList.size());
            } else {
                chatListView.setSelection(data.size());
            }

    } else {
        currentPage = (currentPage - 0x1);
    }
        chatListView.previousComplete();
    }
    
    public void onMessageReceived(cn.cloudartisan.crius.client.model.Message message) {
        Message msg = MessageUtil.transform(message);
        if(("0".equals(msg.type)) && (msg.sender.equals(messageSource.getId()))) {
            lastMessage = MessageUtil.transform(message);
            messageList.add(lastMessage);
            adapter.notifyDataSetChanged();
            chatListView.setSelection(chatListView.getBottom());
            if((messageList.size() == 0x1) && (currentPage == 0)) {
                currentPage = 0x1;
            }
        }
        if((messageSource.getId().equals(msg.sender)) && (msg.type.equals("108"))) {
            msg.gid = message.getContent();
            ToMessageView view = (ToMessageView)chatListView.findViewWithTag(msg);
            if(view != null) {
                view.showReadMark();
            }
        }
    }
    
    public void onPreviou() {
        currentPage = (currentPage + 0x1);
        loadChatRecord();
    }
    
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        if(resultCode == -1) {
            if(requestCode == 1) {
                this.compressThenToSend(ImageLoader.getInstance().loadImageSync("file://" + this.customInputPanelView.photoFile.getAbsolutePath()), this.customInputPanelView.photoFile);
            } else {
                if(requestCode == 2) {
                    try {
                        this.customInputPanelView.photoFile = (File)data.getSerializableExtra("file");
                        Bitmap var7 = ImageLoader.getInstance().loadImageSync("file://" + this.customInputPanelView.photoFile.getAbsolutePath());
                        File var8 = new File(Constant.CACHE_DIR_IMAGE + "/" + StringUtils.getUUID());
                        FileUtils.copyFile(this.customInputPanelView.photoFile, var8);
                        this.compressThenToSend(var7, var8);
                        return;
                    } catch (IOException var5) {
                        var5.printStackTrace();
                        return;
                    }
                }

                if(requestCode == 3) {
                    this.submitToSendQueue(data.getStringExtra("info"), data.getStringExtra("file"), "3");
                    return;
                }

                if(requestCode == 4) {
                    HashMap var6 = (HashMap)data.getSerializableExtra("data");
                    String var4 = var6.get("file").toString();
                    var6.remove("file");
                    this.submitToSendQueue(JSON.toJSONString(var6), var4, "4");
                    return;
                }
            }
        }

    }
    
    public boolean dispatchTouchEvent(MotionEvent paramMotionEvent) {
        if(this.voiceButton.getVisibility() != View.VISIBLE) {
            return super.dispatchTouchEvent(paramMotionEvent);
        } else {
            int[] var3 = new int[4];
            int[] loc=new int[2];
            this.voiceButton.getLocationInWindow(loc);
            var3[0]=loc[0];
            var3[1]=loc[1];
            var3[2] = var3[0] + this.voiceButton.getWidth();
            var3[3] = var3[1] + this.voiceButton.getHeight();
            if(this.voiceRecordingPanel == null) {
                this.voiceRecordingPanel = this.findViewById(R.id.recordingPanelView);
                this.recordTime = (TextView)this.findViewById(R.id.recordingTime);
                this.recordingHint = (TextView)this.findViewById(R.id.recordingHint);
            }

            switch(paramMotionEvent.getAction()) {
                case 0:
                    if(AppTools.contains(var3, paramMotionEvent)) {
                        GlobalMediaPlayer.getPlayer().start(R.raw.startrecord);
                        this.isVoiceRecording = true;
                        this.recordHandler.sendMessage(this.recordHandler.obtainMessage());
                        this.voiceButton.setSelected(true);
                        this.voiceButton.setText(R.string.label_chat_soundrecord_pressed);
                        this.recordingHint.setText(R.string.label_chat_soundcancle);

                        try {
                            this.voiceRecordingPanel.setVisibility(View.VISIBLE);
                            this.mediaRecorder = new MediaRecorder();
                            this.voiceFile = new File(Constant.CACHE_DIR_VOICE + "/" + StringUtils.getUUID());
                            this.voiceFile.createNewFile();
                            this.mediaRecorder.setAudioSource(1);
                            this.mediaRecorder.setOutputFormat(3);
                            this.mediaRecorder.setAudioEncoder(1);
                            this.mediaRecorder.setOutputFile(this.voiceFile.getAbsolutePath());
                            this.mediaRecorder.prepare();
                            this.startTime = System.currentTimeMillis();
                            this.mediaRecorder.start();
                        } catch (Exception var4) {
                            var4.printStackTrace();
                        }
                    }
                    break;
                case 1:
                    this.endTime = System.currentTimeMillis();
                    boolean var2;
                    if(AppTools.contains(var3, paramMotionEvent) && (this.endTime - this.startTime) / 1000L > 0L) {
                        var2 = true;
                    } else {
                        var2 = false;
                    }

                    this.recordCompleted(var2);
                    break;
                case 2:
                    if(this.isVoiceRecording) {
                        if(!AppTools.contains(var3, paramMotionEvent)) {
                            this.recordingHint.setText(R.string.label_chat_unlashcancle);
                            this.findViewById(R.id.recordingBanner).setSelected(true);
                            this.voiceButton.setSelected(false);
                        } else {
                            this.recordingHint.setText(R.string.label_chat_soundcancle);
                            this.findViewById(R.id.recordingBanner).setSelected(false);
                            this.voiceButton.setSelected(true);
                        }
                    }
            }

            return super.dispatchTouchEvent(paramMotionEvent);
        }

    }
    
    private void recordCompleted(boolean isValid) {
        if(isVoiceRecording) {
            ((AlarmManager)getSystemService(Context.ALARM_SERVICE)).cancel(recordPendingIntent);
            try {
                mediaRecorder.stop();
                mediaRecorder.release();
            } catch(Exception localException1) {
            }
            voiceButton.setSelected(false);
            voiceRecordingPanel.setVisibility(View.GONE);
            voiceButton.setText(R.string.label_chat_soundrecord_normal);
            if(isValid) {
                submitToSendQueue(String.valueOf(((endTime - startTime) / 0x3e8)), voiceFile.getName(), "2");
            } else {
                //FileUtils.deleteQuietly(voiceFile);
                try {
                    FileUtils.forceDelete(voiceFile);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        isVoiceRecording = false;
    }
    
    public MessageItemSource getMessageSource() {
        String account = getIntent().getStringExtra("othersId");
        Friend friend= new Friend();

        friend.account="15216700472";
        friend.fristChar="w";
        friend.gender="0";
        friend.name="吴友琴";
        friend.online="1";
        friend.motto="1";
        return  friend;
        //return FriendDBManager.getManager().queryFriend(account);
    }
    
    public void onSendContent(String content) {
        submitToSendQueue(content, null, "0");
        ((EditText)findViewById(R.id.messageEditText)).getText().clear();
    }
    
    public void onClick(View v) {
    }
    
    public void submitToSendQueue(String context, String fileName, String fileType) {
        Message message = new Message();
        message.gid = StringUtils.getUUID();
        message.content = context;
        message.sender = self.getAccount();
        message.receiver = messageSource.getId();
        message.fileType = fileType;
        message.file = fileName;
        message.type = messageType;
        message.createTime = String.valueOf(System.currentTimeMillis());
        message.status = "-1";
        lastMessage = message;
        messageList.add(message);
        MessageDBManager.getManager().saveMessage(message);
        adapter.notifyDataSetChanged();
        chatListView.setSelection(chatListView.getBottom());
        if((messageList.size() == 0x1) && (currentPage == 0)) {
            currentPage = 0x1;
        }
    }
    
    public void compressThenToSend(Bitmap bitmap, File file) {
        bitmap = BitmapUtil.compressionAndSavePhoto(bitmap, file);
        StringBuffer buffer = new StringBuffer();
        String orgImage = StringUtils.getUUID();
        file.renameTo(new File("/" + orgImage));
        HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("ow", Integer.valueOf(bitmap.getWidth()));
        map.put("oh", Integer.valueOf(bitmap.getHeight()));
        map.put("image", orgImage);
        String thumbnailFile = StringUtils.getUUID();
        buffer.append(orgImage);
        Bitmap thumbnail = BitmapUtil.getThumbnail(bitmap, thumbnailFile);
        map.put("tw", Integer.valueOf(thumbnail.getWidth()));
        map.put("th", Integer.valueOf(thumbnail.getHeight()));
        if(thumbnail != bitmap) {
            map.put("thumbnail", thumbnailFile);
            buffer.append(",").append(thumbnailFile);
        } else {
            map.put("thumbnail", orgImage);
        }
        submitToSendQueue(JSON.toJSONString(map), buffer.toString(), "1");
        bitmap.recycle();
    }
    
    public void onDestroy() {
        messageList.clear();
        messageList = null;
        GlobalVoicePlayer.getPlayer().stop();
        unregisterReceiver(recordBroadcastReceiver);
        unregisterReceiver(chatListView.messageSendReceiver);
        super.onDestroy();
    }
    
    public void finish() {
        if(lastMessage != null) {
            ChatItem chatItem = new ChatItem();
            chatItem.source = getMessageSource();
            chatItem.message = lastMessage;
            Intent intent = new Intent();
            intent.putExtra("data", chatItem);
            intent.setAction("com.farsunset.cim.MESSAGE_APPEND");
            sendBroadcast(intent);
        }
        super.finish();
    }
    
    public int getConentLayout() {
        return R.layout.activity_friend_chat;
    }
    
    public int getActionBarTitle() {
        return R.string.common_back;
    }
    
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.single_icon, menu);
        menu.findItem(R.id.menu_icon).setIcon(getMenuIcon());
        return super.onCreateOptionsMenu(menu);
    }
    
    public int getMenuIcon() {
        return R.drawable.actionbar_particular_icon;
    }
    
    public boolean onOptionsItemSelected(MenuItem item) {
        switch(item.getItemId()) {
            case R.id.menu_icon:
            {
                MessageItemSource other = getMessageSource();
                Intent intent = new Intent();
                if(other instanceof Group) {
                    intent.setClass(this, GroupDetailActivity.class);
                    intent.putExtra("group", (Group)other);
                    startActivity(intent);
                } else if(other instanceof Friend) {
                    intent.setClass(this, UserDetailActivity.class);
                    intent.putExtra("user", (Friend)other);
                    startActivity(intent);
                } else if(other instanceof Bottle) {
                    Friend friend = FriendDBManager.getManager().queryFriend(((Bottle)other).getId());
                    if(friend != null) {
                        intent.setClass(this, UserDetailActivity.class);
                        intent.putExtra("user", friend);
                        startActivity(intent);
                    } else {
                       // Friend friend = new Friend();
                        friend.account =( (Bottle)other).getId();
                        intent.setClass(this, AllyRequestActivity.class);
                        intent.putExtra("user", friend);
                        startActivity(intent);
                        break;
                    }
                }
            }
        }
        return super.onOptionsItemSelected(item);
    }
    
    public void onTouchDown() {
        customInputPanelView.reset();
    }
    
    public void onKeyboardShow() {
        chatListView.setSelection(chatListView.getBottom());
    }

    public class RecordBroadcastReceiver
            extends BroadcastReceiver
    {
        public static final String ACTION_RECORDING = "ACTION_RECORDING";

        public RecordBroadcastReceiver() {}

        public IntentFilter getIntentFilter()
        {
            IntentFilter localIntentFilter = new IntentFilter();
            localIntentFilter.addAction("ACTION_RECORDING");
            return localIntentFilter;
        }

        public void onReceive(Context paramContext, Intent paramIntent)
        {
            long l = System.currentTimeMillis();
            int i = (int)((l - FriendChatActivity.this.startTime) / 1000L);
            if (i >= 60)
            {
                FriendChatActivity.this.endTime = l;
                FriendChatActivity.this.recordCompleted(true);
                return;
            }
            if (i < 10)
            {
                FriendChatActivity.this.recordTime.setText("00:0" + i);
                return;
            }
            FriendChatActivity.this.recordTime.setText("00:" + i);
        }
    }
}
